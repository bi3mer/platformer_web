class K{scenes={};registerScene(X,f){if(this.scenes[X]===void 0)this.scenes[X]=f;else console.error(`Key "${X}" for scene already exists! Scene not added to SceneManager.`)}getScene(X){return this.scenes[X]}}class H{changeScene;onExit(){this.changeScene=void 0,this._onExit()}}var R="main menu",D="game";class E extends H{constructor(){super()}onEnter(){}update(X){this.changeScene=D}render(){}_onExit(){}}var v=720,T=480,C=32,Y=15,n=17,t=20,a=30,e=0.625,XX=0.9375,fX=31,FX=31,qX=0.96875,QX=0.96875,$X=16,JX=16,ZX=0.5,VX=0.5,S=25,b=15,u=0.78125,I=0.46875,BX="start";class M{startCol=0;endCol=0;offsetX=0;colsPerScreen=Math.ceil(v/C);update(X){const f=X-this.colsPerScreen/2;this.startCol=Math.max(0,Math.floor(f)),this.endCol=this.startCol+this.colsPerScreen,this.offsetX=-f*C+this.startCol*C}columnToScreen(X){return(X-this.startCol)*C+this.offsetX}rowToScreen(X){return X*C}}class A{x;y;constructor(X,f){this.x=X,this.y=f}copy(){return new A(this.x,this.y)}zero(){this.x=0,this.y=0}equals(X){return this.x==X.x&&this.y==X.y}add(X){return new A(this.x+X.x,this.y+X.y)}addInPlace(X){this.x+=X.x,this.y+=X.y}subtract(X){return new A(this.x-X.x,this.y-X.y)}subtractInPlace(X){this.x-=X.x,this.y-=X.y}scalarAdd(X){this.x+=X,this.y+=X}scalarSubtract(X){this.x-=X,this.y-=X}scalarMultiply(X){return new A(this.x*X,this.y*X)}scalarMultiplyInPlace(X){this.x*=X,this.y*=X}dot(X){return this.x*X.x+this.y+X.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}}function wX(X,f,F,Q){const{x:q,y:J}=X,$=q+f.x,w=J+f.y,k=F.x,L=F.y,i=k+Q.x,UX=L+Q.y;return q<i&&$>k&&J<UX&&w>L}class W{pos;size;type;dead=!1;velocity=new A(0,0);gravity=new A(0,100);constructor(X,f,F,Q,q){this.pos=new A(X,f),this.size=new A(F,Q),this.type=q}collision(X){if(wX(this.pos,this.size,X.pos,X.size))this.handleCollision(X),X.handleCollision(this)}physicsUpdate(X){this.velocity.addInPlace(this.gravity.scalarMultiply(X)),this.velocity.y=Math.min(this.velocity.y,30),this.pos.addInPlace(this.velocity.scalarMultiply(X))}}var _=0,U=1,x=2,j=3;var B;(function(V){V[V["LEFT"]=0]="LEFT";V[V["RIGHT"]=1]="RIGHT";V[V["DOWN"]=2]="DOWN";V[V["UP"]=3]="UP";V[V["A"]=4]="A";V[V["D"]=5]="D";V[V["E"]=6]="E";V[V["G"]=7]="G";V[V["H"]=8]="H";V[V["I"]=9]="I";V[V["Q"]=10]="Q";V[V["R"]=11]="R";V[V["S"]=12]="S";V[V["W"]=13]="W";V[V["SPACE"]=14]="SPACE";V[V["ESCAPE"]=15]="ESCAPE";V[V["ENTER"]=16]="ENTER";V[V["SHIFT"]=17]="SHIFT";V[V["INVALID"]=18]="INVALID"})(B||(B={}));class z{static _keys=[];static init(){for(let X=0;X<Object.keys(B).length;++X)z._keys.push(!1);window.addEventListener("keydown",z.onKeyDown),window.addEventListener("keyup",z.onKeyUp)}static isKeyDown(...X){const f=X.length;for(let F=0;F<f;++F)if(z._keys[X[F]])return!0;return!1}static keyStrToKey(X){switch(X){case"Down":case"ArrowDown":return B.DOWN;case"Up":case"ArrowUp":return B.UP;case"Right":case"ArrowRight":return B.RIGHT;case"Left":case"ArrowLeft":return B.LEFT;case" ":case"Space":return B.SPACE;case"Escape":return B.ESCAPE;case"a":case"A":return B.A;case"e":case"E":return B.E;case"s":case"S":return B.S;case"d":case"D":return B.D;case"w":case"W":return B.W;case"r":case"R":return B.R;case"q":case"Q":return B.Q;case"g":case"G":return B.G;case"h":case"H":return B.H;case"i":case"I":return B.I;case"Shift":return B.SHIFT;case"Enter":return B.ENTER;default:return console.warn(`Unhandled key: ${X}.`),B.INVALID}}static onKeyDown(X){const f=z.keyStrToKey(X.key);if(z._keys[f]=!0,f==B.DOWN||f==B.UP||f==B.LEFT||f==B.RIGHT)X.preventDefault();return!1}static onKeyUp(X){return z._keys[z.keyStrToKey(X.key)]=!1,!1}static clear(){for(let X=0;X<z._keys.length;++X)z._keys[X]=!1}}var kX=6,zX=8,RX=0.4;class h extends W{movingRight=!1;movingLeft=!1;moveMod=0;jumpTime=0;squash=1;stretch=1;coinsCollected=0;constructor(X,f){super(X,f,e,XX,_)}update(X){if(this.pos.y>n){this.dead=!0,console.log("Player fell...");return}if(this.velocity.x=0,z.isKeyDown(B.D,B.RIGHT))this.movingRight=!0,this.velocity.x=kX,this.moveMod=Math.min(zX,this.moveMod+X);if(z.isKeyDown(B.A,B.LEFT))if(this.movingRight)this.movingRight=!1,this.velocity.x=0;else this.movingLeft=!0,this.velocity.x=-kX,this.moveMod=Math.min(zX,this.moveMod+X);if(this.jumpTime<RX&&z.isKeyDown(B.SPACE,B.UP)){if(this.jumpTime===0)this.velocity.y=-15;else if(this.jumpTime<0.2)this.velocity.y-=2;this.squash+=0.01,this.stretch-=0.01,this.jumpTime+=X}else if(this.squash!=this.stretch)this.squash+=0.01,this.stretch-=0.01}handleCollision(X){switch(X.type){case U:{const f=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),Q=f.subtract(F);this.size.add(X.size).scalarMultiply(0.5);const J=Math.abs(Math.atan(Q.y/Q.x));if(!(J<0.96&&J>0.698)&&Math.abs(Q.x/this.size.x)>Math.abs(Q.y/this.size.y))if(Q.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x;else if(Q.y>0)this.pos.y=X.pos.y+X.size.y;else{this.pos.y=X.pos.y-this.size.y,this.velocity.y=0,this.jumpTime=0;const w=this.stretch;this.stretch=1.05,this.squash=0.95}break}case x:{++this.coinsCollected;break}case j:{this.dead=!0,console.log("Ran into an enemy! :/");break}default:{console.warn(`Player unhandled collision type: ${X.type}.`);break}}}render(X,f){X.fillStyle="rgba(150,150,255,1)";const F=f.columnToScreen(this.pos.x),Q=f.rowToScreen(this.pos.y),q=a*this.squash,J=t*this.stretch;if(this.movingRight){let $=new Path2D;$.moveTo(F,Q),$.lineTo(F-this.moveMod,Q+q),$.lineTo(F+J-this.moveMod,Q+q),$.lineTo(F+J,Q),$.closePath(),X.fill($,"evenodd"),this.movingRight=!1}else if(this.movingLeft){let $=new Path2D;$.moveTo(F,Q),$.lineTo(F+this.moveMod,Q+q),$.lineTo(F+J+this.moveMod,Q+q),$.lineTo(F+J,Q),$.closePath(),X.fill($,"evenodd"),this.movingLeft=!1}else X.fillRect(F,Q,J,q)}}class d extends W{constructor(X,f){super(X,f,qX,QX,U)}update(X){}handleCollision(X){}render(X,f){X.strokeStyle="white",X.strokeRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),fX,FX)}}class G extends W{minY;maxY;yMod;constructor(X,f){super(X+0.25,f+0.25,ZX,VX,x);this.gravity.y=0,this.yMod=Math.random()*0.5,this.maxY=f+0.3,this.minY=f+0.15,this.velocity.y=this.yMod}update(X){if(this.pos.y>=this.maxY)this.velocity.y=-this.yMod;else if(this.pos.y<=this.minY)this.velocity.y=this.yMod}handleCollision(X){if(X.type===_)this.dead=!0}render(X,f){X.fillStyle="yellow",X.fillRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),$X,JX)}}class s extends W{maxColumns;constructor(X,f,F){super(X+0.25,f+0.25,u,I,j);this.velocity.x=3,this.gravity.y=0,this.maxColumns=F}update(X){if(this.pos.x<0||this.pos.x>this.maxColumns)this.velocity.x*=-1}handleCollision(X){if(X.type===U){const f=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),Q=f.subtract(F);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(Q.x/this.size.x)>Math.abs(Q.y/this.size.y))if(this.velocity.x*=-1,Q.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x}}render(X,f){X.fillStyle="red",X.fillRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),S,b)}}class p extends W{constructor(X,f){super(X,f+0.1,I,u,j);this.velocity.y=3,this.gravity.y=0,this.pos.x+=0.25}update(X){if(this.pos.y<0||this.pos.y>=Y)this.velocity.y*=-1}handleCollision(X){if(X.type===U){const f=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),Q=f.subtract(F);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(Q.x/this.size.x)<Math.abs(Q.y/this.size.y))if(this.velocity.y*=-1,Q.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y}}render(X,f){X.fillStyle="red",X.fillRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),b,S)}}class g{src;tgt;probability;constructor(X,f,F){this.src=X,this.tgt=f,this.probability=F}}class y{name;reward;utility;isTerminal;neighbors;constructor(X,f,F,Q,q){this.name=X,this.reward=f,this.utility=F,this.isTerminal=Q,this.neighbors=q}}class P{nodes;edges;constructor(){this.nodes={},this.edges={}}getNode(X){return this.nodes[X]}hasNode(X){return X in this.nodes}addNode(X){this.nodes[X.name]=X}addDefaultNode(X,f=1,F=0,Q=!1,q=null){if(q==null)q=[];this.nodes[X]=new y(X,f,F,Q,q)}removeNode(X){const f=[];for(let F of Object.values(this.edges)){if(F.src==X||F.tgt==X)f.push(F);const Q=F.probability;let q=-1;for(let k=0;k<Q.length;k++){const[L,i]=Q[k];if(L==X){q=k;break}}if(q==-1)continue;const J=Q[q][1];Q.splice(q,1);const $=Q.length,w=J/$;F.probability=Q.map(([k,L])=>[k,L+w])}for(let F of f)this.removeEdge(F.src,F.tgt);delete this.nodes[X]}getEdge(X,f){return this.edges[`${X},${f}`]}hasEdge(X,f){return`${X},${f}`in this.edges}addEdge(X){this.edges[`${X.src},${X.tgt}`]=X;const f=this.nodes[X.src].neighbors;if(!f.includes(X.tgt))f.push(X.tgt)}addDefaultEdge(X,f,F=null){if(F==null)F=[[f,1]];this.addEdge(new g(X,f,F))}removeEdge(X,f){const F=this.nodes[X],Q=X.indexOf(f);F.neighbors.splice(Q,1),delete this.edges[`${X},${f}`]}neighbors(X){return this.nodes[X].neighbors}setNodeUtilities(X){for(let[f,F]of Object.entries(X))this.nodes[f].utility=F}utility(X){return this.nodes[X].utility}reward(X){return this.nodes[X].reward}isTerminal(X){return this.nodes[X].isTerminal}mapNodes(X){for(let f of Object.values(this.nodes))X(f)}mapEdges(X){for(let f of Object.values(this.edges))X(f)}}function WX(X){return X[Math.floor(Math.random()*X.length)]}function O(X,f,F,Q){const q=X.getEdge(f,F).probability,J=q.length;let $=0;for(let w=0;w<J;++w){const[k,L]=q[w];$+=L*(X.reward(k)+Q*X.utility(k))}return $}function N(X,f,F){const Q=X.getNode(f);if(Q.isTerminal)return 0;const q=Q.neighbors,J=q.length;let $=(-Infinity);for(let w=0;w<J;++w)$=Math.max($,O(X,f,q[w],F));return $}function l(X){for(let f in X.nodes)X.nodes[f].utility=0}function c(X){const f={};for(let F in X.nodes)if(!X.getNode(F).isTerminal)f[F]=WX(X.neighbors(F));return f}var vX=function(X,f,F,Q){for(let q=0;q<Q;++q)for(let J in X.nodes){const $=X.getNode(J);if(!$.isTerminal)$.utility=O(X,J,f[J],F)}},CX=function(X,f,F,Q){for(let q=0;q<Q;++q){const J={};for(let $ in X.nodes)if(!X.getNode($).isTerminal)J[$]=O(X,$,f[$],F);X.setNodeUtilities(J)}},YX=function(X,f,F,Q){for(let q=0;q<Q;++q)for(let J in X.nodes)X.getNode(J).utility=N(X,J,F)},jX=function(X,f,F,Q){for(let q=0;q<Q;++q){const J={};for(let $ in X.nodes)J[$]=N(X,$,F);X.setNodeUtilities(J)}},AX=function(X,f,F){let Q=!1;for(let q in X.nodes){if(X.getNode(q).isTerminal)continue;let J=null,$=(-Infinity);for(let w of X.neighbors(q)){const k=O(X,q,w,F);if(k>$)J=w,$=k}if(f[q]!==J)f[q]=J,Q=!0}return Q};function m(X,f,F=!1,Q=!1,q=10,J=!0){if(J)l(X);const $=c(X);let w;if(F&&Q)w=vX;else if(F&&!Q)w=CX;else if(!F&&Q)w=YX;else w=jX;let k=!0;while(k)w(X,$,f,q),k=AX(X,$,f);return w(X,$,f,q),AX(X,$,f),$}var Z=new P;Z.addDefaultNode("start",0,0,!1);Z.addDefaultNode("death",-1,0,!0);Z.addDefaultNode("end",1,0,!0);Z.addDefaultNode("4-b",-0.4444444444444444,0,!1);Z.addDefaultNode("2-b",-0.6666666666666666,0,!1);Z.addDefaultNode("3-b",-0.5555555555555556,0,!1);Z.addDefaultNode("4-a",-0.4444444444444444,0,!1);Z.addDefaultNode("3-a",-0.5555555555555556,0,!1);Z.addDefaultNode("2-a",-0.6666666666666666,0,!1);Z.addDefaultNode("6-a",-0.2222222222222222,0,!1);Z.addDefaultNode("1-a",-0.7777777777777778,0,!1);Z.addDefaultNode("5-c",-0.3333333333333333,0,!1);Z.addDefaultNode("5-a",-0.3333333333333333,0,!1);Z.addDefaultNode("5-b",-0.3333333333333333,0,!1);Z.addDefaultEdge("4-b","5-a",[["5-a",0.99],["death",0.01]]);Z.addDefaultEdge("4-b","5-b",[["5-b",0.99],["death",0.01]]);Z.addDefaultEdge("4-b","5-c",[["5-c",0.99],["death",0.01]]);Z.addDefaultEdge("2-b","3-a",[["3-a",0.99],["death",0.01]]);Z.addDefaultEdge("3-b","4-a",[["4-a",0.99],["death",0.01]]);Z.addDefaultEdge("3-b","4-b",[["4-b",0.99],["death",0.01]]);Z.addDefaultEdge("4-a","5-a",[["5-a",0.99],["death",0.01]]);Z.addDefaultEdge("4-a","5-b",[["5-b",0.99],["death",0.01]]);Z.addDefaultEdge("4-a","5-c",[["5-c",0.99],["death",0.01]]);Z.addDefaultEdge("3-a","4-a",[["4-a",0.99],["death",0.01]]);Z.addDefaultEdge("3-a","4-b",[["4-b",0.99],["death",0.01]]);Z.addDefaultEdge("2-a","3-b",[["3-b",0.99],["death",0.01]]);Z.addDefaultEdge("6-a","end",[["end",0.99],["death",0.01]]);Z.addDefaultEdge("start","1-a");Z.addDefaultEdge("1-a","2-a",[["2-a",0.99],["death",0.01]]);Z.addDefaultEdge("1-a","2-b",[["2-b",0.99],["death",0.01]]);Z.addDefaultEdge("5-c","5-a",[["5-a",0.99],["death",0.01]]);Z.addDefaultEdge("5-c","5-b",[["5-b",0.99],["death",0.01]]);Z.addDefaultEdge("5-c","6-a",[["6-a",0.99],["death",0.01]]);Z.addDefaultEdge("5-a","5-b",[["5-b",0.99],["death",0.01]]);Z.addDefaultEdge("5-a","5-c",[["5-c",0.99],["death",0.01]]);Z.addDefaultEdge("5-a","6-a",[["6-a",0.99],["death",0.01]]);Z.addDefaultEdge("5-b","5-a",[["5-a",0.99],["death",0.01]]);Z.addDefaultEdge("5-b","6-a",[["6-a",0.99],["death",0.01]]);var LX={"4-b":["--------------------XX","--------------------XX","--------------------XX","--------------------XX","--------------------XX","-------------H------XX","-----------------o--XX","--------------------XX","-----------XXXXXXX--XX","--------------------XX","-------X------------XX","------XXX-----------XX","-----XXXXX-----------o","----XXXXXXX-----------","XXXXXXXXXXXXXXXX--XXXX"],"2-b":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-----------o----------","--------------------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"3-b":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-----------o----------","--------------------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"4-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-----------------X----","-----------------V----","-------X--------------","------XX------o----o--","-----XXX--------------","XXXXXXXX---XXXXXXXXXXX"],"3-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-------XXXXXXXX-------","----------------------","-------V--o---V-------","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],end:["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----oooooooooooooooooo","XXXXXXXXXXXXXXXXXXXXXX"],"2-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-------XXXXXXXX-------","----------------------","-------V--o---V-------","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],"6-a":["-----------------o--V-----o--------","-----------------H--------H--------","------------XXXXXXXXXXXXXXXXXXX----","-----V--------------H--------------","--------XX----o--------------------","-----------------------------------","-----------XXXXXX---Ho-------------","-----------------------------------","-------------V------XX--------H----","-----------------------------------","XX--------o------XXXXX----H--------","-----------------------------------","---X----H----H-X-----------------o-","---XXXXXXXXXXXXX-------------------","------------------------------XXXXX"],"1-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","--------------X-------","-----o-----o--X------o","XXXXXXXXXXXXXXXXXXXXXX"],"5-c":["0-----------------------------","------------------------------","X---XX------------------------","------------------------------","--------XX--------------------","XX----------------------------","--------XXXXX-----------------","--------Xoo-------------------","XXX-----Xoo----o------------o-","--------X---------------------","--------XXX---XX----XX----XXXX","XXXX--------------------------","------------------------------","------------------------------","XXXXXXXX----------------------"],"5-a":["---------------------X--------","-------------------o-X--------","---------------------X--------","---------------------X--------","------------------XXXX--------","------------------------------","-----------o--XX--------------","------------------------------","----------XX----------------o-","------------------------------","--------------XX---XXX----XXXX","------------------------------","----------XX------------------","------------------------------","XXXXXXXX----------------------"],"5-b":["------------------------------","-o----------------------------","------------------------------","XXX---------------------------","------------------------------","-----XXX----------------------","------------------------------","-----------XXX-----------------","-0--------------------------o-","------XXX---------------------","XXX-----------------------XXXX","------------XXX-------XX------","------------------XX----------","------------------------------","XXXXXXXX---XXXXX--------------"]};class o extends H{ctx;camera;numCoins;staticEntities;dynamicEntities;constructor(X){super();this.ctx=X,this.camera=new M}onEnter(){this.dynamicEntities=[],this.staticEntities=[],this.numCoins=0,this.dynamicEntities.push(new h(2,12));const X=this.generateLevel(3),f=X.length;if(f!==Y){console.error("Level should have 15 rows!");return}const F=X[0].length;for(let Q=0;Q<f;++Q){const q=X[Q];if(F!==q.length){console.error(`Every row in the level should have the same number of columns! (${F} !== ${q.length}).`);return}for(let J=0;J<F;++J)if(q[J]==="X")this.staticEntities.push(new d(J,Q));else if(q[J]==="o")++this.numCoins,this.dynamicEntities.push(new G(J,Q));else if(q[J]==="H")this.dynamicEntities.push(new s(J,Q,F));else if(q[J]==="V")this.dynamicEntities.push(new p(J,Q))}}update(X){let f=this.dynamicEntities.length,F=0;for(;F<f;++F)if(this.dynamicEntities[F].dead)this.dynamicEntities.splice(F,1),--f,--F;const Q=this.staticEntities.length;let q;for(F=0;F<f;++F){const $=this.dynamicEntities[F];$.update(X),$.physicsUpdate(X);for(q=F+1;q<f;++q)$.collision(this.dynamicEntities[q]);for(q=0;q<Q;++q)$.collision(this.staticEntities[q])}const J=this.dynamicEntities[0];if(J.coinsCollected>=this.numCoins)console.log("Player won!"),this.changeScene=R;if(J.dead)this.changeScene=R}render(){this.ctx.clearRect(0,0,v,T),this.camera.update(this.dynamicEntities[0].pos.x);let X=this.staticEntities.length,f=0;for(;f<X;++f)this.staticEntities[f].render(this.ctx,this.camera);X=this.dynamicEntities.length;for(f=0;f<X;++f)this.dynamicEntities[f].render(this.ctx,this.camera)}_onExit(){}generateLevel(X){const f=m(Z,0.95,!0,!0,20),F=[BX];for(let q=0;q<X;++q)F.push(f[F[q]]);const Q=Array(Y).fill("");for(let q=1;q<=X;++q){const J=LX[F[q]];for(let $=0;$<Y;++$)Q[$]+=J[$]}return Q}}class r{canvas;ctx;currentScene;sceneManager;constructor(){this.canvas=document.createElement("canvas"),this.canvas.setAttribute("id","canvas"),this.canvas.width=v,this.canvas.height=T,this.ctx=this.canvas.getContext("2d"),document.getElementById("game").appendChild(this.canvas),this.sceneManager=new K,this.sceneManager.registerScene(R,new E),this.sceneManager.registerScene(D,new o(this.ctx)),this.currentScene=this.sceneManager.getScene(R),this.currentScene.onEnter()}start(){let X=0;const f=(F)=>{const Q=Math.min(0.05,(F-X)/1000);X=F,this.currentScene.update(Q),this.currentScene.render();const q=this.currentScene.changeScene;if(q!==void 0)this.currentScene.onExit(),this.currentScene=this.sceneManager.getScene(q),this.currentScene.onEnter();window.requestAnimationFrame(f)};window.requestAnimationFrame(f)}}window.addEventListener("load",()=>{z.init(),new r().start()});
