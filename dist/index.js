class a{scenes={};registerScene(X,q){if(this.scenes[X]===void 0)this.scenes[X]=q;else console.error(`Key "${X}" for scene already exists! Scene not added to SceneManager.`)}getScene(X){return this.scenes[X]}}class O{changeScene;onExit(){this.changeScene=void 0,this._onExit()}}var h="main menu",D="game",g="player won",C="transition",d="lost",_="won";var W=720,R=480,L=32,H=15,L0=17,p=20,N=30,C0=0.625,R0=0.9375,y=31,s=31,A0=0.96875,b0=0.96875,H0=16,Y0=16,x0=0.5,u0=0.5,l=25,E=15,m=0.78125,c=0.46875,Y="start",G="end",B="death";var Z;(function(z){z[z["LEFT"]=0]="LEFT";z[z["RIGHT"]=1]="RIGHT";z[z["DOWN"]=2]="DOWN";z[z["UP"]=3]="UP";z[z["A"]=4]="A";z[z["D"]=5]="D";z[z["E"]=6]="E";z[z["G"]=7]="G";z[z["H"]=8]="H";z[z["I"]=9]="I";z[z["Q"]=10]="Q";z[z["R"]=11]="R";z[z["S"]=12]="S";z[z["W"]=13]="W";z[z["SPACE"]=14]="SPACE";z[z["ESCAPE"]=15]="ESCAPE";z[z["ENTER"]=16]="ENTER";z[z["SHIFT"]=17]="SHIFT";z[z["INVALID"]=18]="INVALID"})(Z||(Z={}));class v{static _keys=[];static init(){for(let X=0;X<Object.keys(Z).length;++X)v._keys.push(!1);window.addEventListener("keydown",v.onKeyDown),window.addEventListener("keyup",v.onKeyUp)}static isKeyDown(...X){const q=X.length;for(let F=0;F<q;++F)if(v._keys[X[F]])return!0;return!1}static keyStrToKey(X){switch(X){case"Down":case"ArrowDown":return Z.DOWN;case"Up":case"ArrowUp":return Z.UP;case"Right":case"ArrowRight":return Z.RIGHT;case"Left":case"ArrowLeft":return Z.LEFT;case" ":case"Space":return Z.SPACE;case"Escape":return Z.ESCAPE;case"a":case"A":return Z.A;case"e":case"E":return Z.E;case"s":case"S":return Z.S;case"d":case"D":return Z.D;case"w":case"W":return Z.W;case"r":case"R":return Z.R;case"q":case"Q":return Z.Q;case"g":case"G":return Z.G;case"h":case"H":return Z.H;case"i":case"I":return Z.I;case"Shift":return Z.SHIFT;case"Enter":return Z.ENTER;default:return console.warn(`Unhandled key: ${X}.`),Z.INVALID}}static onKeyDown(X){const q=v.keyStrToKey(X.key);if(v._keys[q]=!0,q==Z.DOWN||q==Z.UP||q==Z.LEFT||q==Z.RIGHT)X.preventDefault();return!1}static onKeyUp(X){return v._keys[v.keyStrToKey(X.key)]=!1,!1}static clear(){for(let X=0;X<v._keys.length;++X)v._keys[X]=!1}}class A{x;y;constructor(X,q){this.x=X,this.y=q}copy(){return new A(this.x,this.y)}zero(){this.x=0,this.y=0}equals(X){return this.x==X.x&&this.y==X.y}add(X){return new A(this.x+X.x,this.y+X.y)}addInPlace(X){this.x+=X.x,this.y+=X.y}subtract(X){return new A(this.x-X.x,this.y-X.y)}subtractInPlace(X){this.x-=X.x,this.y-=X.y}scalarAdd(X){this.x+=X,this.y+=X}scalarSubtract(X){this.x-=X,this.y-=X}scalarMultiply(X){return new A(this.x*X,this.y*X)}scalarMultiplyInPlace(X){this.x*=X,this.y*=X}dot(X){return this.x*X.x+this.y+X.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}}var M="rgba(150,150,255,1)";var T0=Math.floor(W/L)-1;class t extends O{ctx;transitionScene;fakePlayerPos;sign;constructor(X,q){super();this.ctx=X,this.transitionScene=q,this.fakePlayerPos=new A(10,(H-2)*L),this.sign=1}onEnter(){this.ctx.clearRect(0,0,W,R),this.ctx.fillStyle=M,this.ctx.font="48px Arial",this.ctx.fillText("Recformer",247,100),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to start",220,R*0.55);const X=this.fakePlayerPos.y+L;this.ctx.strokeStyle="white";for(let q=0;q<25;++q)this.ctx.strokeRect(q*L,X,y,s);this.ctx.fillStyle=M}update(X){if(v.isKeyDown(Z.SPACE))this.transitionScene.targetScene=D,this.changeScene=C;const q=this.fakePlayerPos.x;if(q<1||q>T0)this.sign*=-1;this.fakePlayerPos.x+=X*this.sign}render(){const X=this.fakePlayerPos.x*L,q=(H-2)*L;this.ctx.clearRect(0,this.fakePlayerPos.y,W,N),this.ctx.fillRect(X,q,p,N)}_onExit(){}}class e{startCol=0;endCol=0;offsetX=0;colsPerScreen=Math.ceil(W/L);update(X){const q=X-this.colsPerScreen/2;this.startCol=Math.max(0,Math.floor(q)),this.endCol=this.startCol+this.colsPerScreen,this.offsetX=-q*L+this.startCol*L}columnToScreen(X){return(X-this.startCol)*L+this.offsetX}rowToScreen(X){return X*L}}function D0(X,q,F,f){const{x:Q,y:J}=X,$=Q+q.x,k=J+q.y,w=F.x,j=F.y,x=w+f.x,u=j+f.y;return Q<x&&$>w&&J<u&&k>j}class b{pos;size;type;dead=!1;velocity=new A(0,0);gravity=new A(0,100);constructor(X,q,F,f,Q){this.pos=new A(X,q),this.size=new A(F,f),this.type=Q}collision(X){if(D0(this.pos,this.size,X.pos,X.size))this.handleCollision(X),X.handleCollision(this)}physicsUpdate(X){this.velocity.addInPlace(this.gravity.scalarMultiply(X)),this.velocity.y=Math.min(this.velocity.y,30),this.pos.addInPlace(this.velocity.scalarMultiply(X))}}var r=0,P=1,i=2,S=3;var P0=6,I0=8,h0=0.4;class X0 extends b{movingRight=!1;movingLeft=!1;moveMod=0;jumpTime=0;squash=1;stretch=1;coinsCollected=0;maxColumn=0;constructor(X,q){super(X,q,C0,R0,r)}update(X){if(this.pos.y>L0){this.dead=!0,console.log("Player fell...");return}if(this.velocity.x=0,v.isKeyDown(Z.D,Z.RIGHT))this.movingRight=!0,this.velocity.x=P0,this.moveMod=Math.min(I0,this.moveMod+X);if(v.isKeyDown(Z.A,Z.LEFT))if(this.movingRight)this.movingRight=!1,this.velocity.x=0;else this.movingLeft=!0,this.velocity.x=-P0,this.moveMod=Math.min(I0,this.moveMod+X);if(this.jumpTime<h0&&v.isKeyDown(Z.SPACE,Z.UP)){if(this.jumpTime===0)this.velocity.y=-15;else if(this.jumpTime<0.2)this.velocity.y-=2;this.squash=Math.min(1.03,this.squash+0.01),this.stretch=Math.max(0.97,this.stretch-0.01),this.jumpTime+=X}else if(this.squash!=this.stretch)this.squash+=0.01,this.stretch-=0.01;this.maxColumn=Math.max(this.pos.x,this.maxColumn)}handleCollision(X){switch(X.type){case P:{const q=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),f=q.subtract(F);this.size.add(X.size).scalarMultiply(0.5);const J=Math.abs(Math.atan(f.y/f.x));if(!(J<0.96&&J>0.698)&&Math.abs(f.x/this.size.x)>Math.abs(f.y/this.size.y))if(f.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x;else if(f.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y,this.velocity.y=0,this.jumpTime=0,this.stretch=1.01,this.squash=0.99;break}case i:{++this.coinsCollected;break}case S:{this.dead=!0,console.log("Ran into an enemy! :/");break}default:{console.warn(`Player unhandled collision type: ${X.type}.`);break}}}render(X,q){X.fillStyle=M;const F=q.columnToScreen(this.pos.x),f=q.rowToScreen(this.pos.y),Q=N*this.squash,J=p*this.stretch;if(this.movingRight){let $=new Path2D;$.moveTo(F,f),$.lineTo(F-this.moveMod,f+Q),$.lineTo(F+J-this.moveMod,f+Q),$.lineTo(F+J,f),$.closePath(),X.fill($,"evenodd"),this.movingRight=!1}else if(this.movingLeft){let $=new Path2D;$.moveTo(F,f),$.lineTo(F+this.moveMod,f+Q),$.lineTo(F+J+this.moveMod,f+Q),$.lineTo(F+J,f),$.closePath(),X.fill($,"evenodd"),this.movingLeft=!1}else X.fillRect(F,f,J,Q)}}class q0 extends b{constructor(X,q){super(X,q,A0,b0,P)}update(X){}handleCollision(X){}render(X,q){X.strokeStyle="white",X.strokeRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),y,s)}}class F0 extends b{minY;maxY;yMod;constructor(X,q){super(X+0.25,q+0.25,x0,u0,i);this.gravity.y=0,this.yMod=Math.random()*0.5,this.maxY=q+0.3,this.minY=q+0.15,this.velocity.y=this.yMod}update(X){if(this.pos.y>=this.maxY)this.velocity.y=-this.yMod;else if(this.pos.y<=this.minY)this.velocity.y=this.yMod}handleCollision(X){if(X.type===r)this.dead=!0}render(X,q){X.fillStyle="yellow",X.fillRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),H0,Y0)}}class f0 extends b{maxColumns;constructor(X,q,F){super(X+0.25,q+0.25,m,c,S);this.velocity.x=3,this.gravity.y=0,this.maxColumns=F}update(X){if(this.pos.x<0||this.pos.x>this.maxColumns)this.velocity.x*=-1}handleCollision(X){if(X.type===P){const q=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),f=q.subtract(F);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(f.x/this.size.x)>Math.abs(f.y/this.size.y))if(this.velocity.x*=-1,f.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x}}render(X,q){X.fillStyle="red",X.fillRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),l,E)}}class Q0 extends b{constructor(X,q){super(X,q+0.1,c,m,S);this.velocity.y=3,this.gravity.y=0,this.pos.x+=0.25}update(X){if(this.pos.y<0||this.pos.y>=H)this.velocity.y*=-1}handleCollision(X){if(X.type===P){const q=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),f=q.subtract(F);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(f.x/this.size.x)<Math.abs(f.y/this.size.y))if(this.velocity.y*=-1,f.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y}}render(X,q){X.fillStyle="red",X.fillRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),E,l)}}class $0{src;tgt;probability;constructor(X,q,F){this.src=X,this.tgt=q,this.probability=F}}class K{name;reward;utility;isTerminal;neighbors;constructor(X,q,F,f,Q){this.name=X,this.reward=q,this.utility=F,this.isTerminal=f,this.neighbors=Q}}class o{nodes;edges;constructor(){this.nodes={},this.edges={}}getNode(X){return this.nodes[X]}hasNode(X){return X in this.nodes}addNode(X){this.nodes[X.name]=X}addDefaultNode(X,q=1,F=0,f=!1,Q=null){if(Q==null)Q=[];this.nodes[X]=new K(X,q,F,f,Q)}removeNode(X){const q=[];for(let F of Object.values(this.edges)){if(F.src==X||F.tgt==X)q.push(F);const f=F.probability;let Q=-1;for(let w=0;w<f.length;w++){const[j,x]=f[w];if(j==X){Q=w;break}}if(Q==-1)continue;const J=f[Q][1];f.splice(Q,1);const $=f.length,k=J/$;F.probability=f.map(([w,j])=>[w,j+k])}for(let F of q)this.removeEdge(F.src,F.tgt);delete this.nodes[X]}getEdge(X,q){return this.edges[`${X},${q}`]}hasEdge(X,q){return`${X},${q}`in this.edges}addEdge(X){this.edges[`${X.src},${X.tgt}`]=X;const q=this.nodes[X.src].neighbors;if(!q.includes(X.tgt))q.push(X.tgt)}addDefaultEdge(X,q,F=null){if(F==null)F=[[q,1]];this.addEdge(new $0(X,q,F))}removeEdge(X,q){const F=this.nodes[X],f=F.neighbors.indexOf(q);F.neighbors.splice(f,1),delete this.edges[`${X},${q}`]}neighbors(X){return this.nodes[X].neighbors}setNodeUtilities(X){for(let[q,F]of Object.entries(X))this.nodes[q].utility=F}utility(X){return this.nodes[X].utility}reward(X){return this.nodes[X].reward}isTerminal(X){return this.nodes[X].isTerminal}mapNodes(X){for(let q of Object.values(this.nodes))X(q)}mapEdges(X){for(let q of Object.values(this.edges))X(q)}}function I(X){return X[Math.floor(Math.random()*X.length)]}function T(X,q,F,f){const Q=X.getEdge(q,F).probability,J=Q.length;let $=0;for(let k=0;k<J;++k){const[w,j]=Q[k];$+=j*(X.reward(w)+f*X.utility(w))}return $}function n(X,q,F){const f=X.getNode(q);if(f.isTerminal)return 0;const Q=f.neighbors,J=Q.length;let $=(-Infinity);for(let k=0;k<J;++k)$=Math.max($,T(X,q,Q[k],F));return $}function J0(X){for(let q in X.nodes)X.nodes[q].utility=0}function V0(X){const q={};for(let F in X.nodes)if(!X.getNode(F).isTerminal)q[F]=[...X.neighbors(F)];return q}function Z0(X,q){const F={};for(let f in X.nodes){if(X.getNode(f).isTerminal)continue;let Q=(-Infinity),J=[];for(let $ of X.neighbors(f)){const k=T(X,f,$,q);if(k===Q)J.push($);else if(k>Q)Q=k,J.length=0,J.push($)}F[f]=J}return F}var N0=function(X,q,F,f){for(let Q=0;Q<f;++Q)for(let J in X.nodes){const $=X.getNode(J);if(!$.isTerminal)$.utility=T(X,J,I(q[J]),F)}},G0=function(X,q,F,f){for(let Q=0;Q<f;++Q){const J={};for(let $ in X.nodes)if(!X.getNode($).isTerminal)J[$]=T(X,$,I(q[$]),F);X.setNodeUtilities(J)}},K0=function(X,q,F,f){for(let Q=0;Q<f;++Q)for(let J in X.nodes)X.getNode(J).utility=n(X,J,F)},g0=function(X,q,F,f){for(let Q=0;Q<f;++Q){const J={};for(let $ in X.nodes)J[$]=n(X,$,F);X.setNodeUtilities(J)}},M0=function(X,q,F){let f=!1;for(let Q in X.nodes){if(X.getNode(Q).isTerminal)continue;let J=null,$=(-Infinity);for(let k of X.neighbors(Q)){const w=T(X,Q,k,F);if(w===$);else if(w>$)J=k,$=w}if(I(q[Q])!==J)q[Q].length=0,q[Q].push(J),f=!0}return f};function z0(X,q,F=!1,f=!1,Q=10,J=!0){if(J)J0(X);const $=V0(X);let k;if(F&&f)k=N0;else if(F&&!f)k=G0;else if(!F&&f)k=K0;else k=g0;let w=!0;while(w)k(X,$,q,Q),w=M0(X,$,q);return k(X,$,q,Q),M0(X,$,q),Z0(X,q)}class U extends K{visitedCount;sumPercentCompleted;depth;designerReward;playerReward;constructor(X,q,F,f,Q,J){super(X,q,F,f,Q);this.designerReward=q,this.playerReward=0,this.depth=J,this.visitedCount=1,this.sumPercentCompleted=1}updateReward(){this.reward=this.designerReward*this.visitedCount}}var V=new o;V.addNode(new U(Y,0,0,!1,[],-1));V.addNode(new U(B,-1,0,!0,[],-1));V.addNode(new U(G,1,0,!0,[],-1));V.addNode(new U("4-b",-0.5454545454545454,0,!1,[],4));V.addNode(new U("2-b",-0.7272727272727273,0,!1,[],2));V.addNode(new U("3-b",-0.6363636363636364,0,!1,[],3));V.addNode(new U("4-a",-0.5454545454545454,0,!1,[],4));V.addNode(new U("3-a",-0.6363636363636364,0,!1,[],3));V.addNode(new U("2-a",-0.7272727272727273,0,!1,[],2));V.addNode(new U("1-a",-0.8181818181818182,0,!1,[],1));V.addNode(new U("5-c",-0.45454545454545453,0,!1,[],5));V.addNode(new U("5-a",-0.45454545454545453,0,!1,[],5));V.addNode(new U("5-b",-0.45454545454545453,0,!1,[],5));V.addNode(new U("6-a",-0.2727272727272727,0,!1,[],6));V.addNode(new U("7-a",-0.18181818181818182,0,!1,[],7));V.addDefaultEdge("4-b","5-a",[["5-a",0.99],[B,0.01]]);V.addDefaultEdge("4-b","5-b",[["5-b",0.99],[B,0.01]]);V.addDefaultEdge("4-b","5-c",[["5-c",0.99],[B,0.01]]);V.addDefaultEdge("2-b","3-a",[["3-a",0.99],[B,0.01]]);V.addDefaultEdge("3-b","4-a",[["4-a",0.99],[B,0.01]]);V.addDefaultEdge("3-b","4-b",[["4-b",0.99],[B,0.01]]);V.addDefaultEdge("4-a","5-a",[["5-a",0.99],[B,0.01]]);V.addDefaultEdge("4-a","5-b",[["5-b",0.99],[B,0.01]]);V.addDefaultEdge("4-a","5-c",[["5-c",0.99],[B,0.01]]);V.addDefaultEdge("3-a","4-a",[["4-a",0.99],[B,0.01]]);V.addDefaultEdge("3-a","4-b",[["4-b",0.99],[B,0.01]]);V.addDefaultEdge("2-a","3-b",[["3-b",0.99],[B,0.01]]);V.addDefaultEdge(Y,"1-a",[["1-a",0.99],[B,0.01]]);V.addDefaultEdge("1-a","2-a",[["2-a",0.99],[B,0.01]]);V.addDefaultEdge("1-a","2-b",[["2-b",0.99],[B,0.01]]);V.addDefaultEdge("5-c","5-a",[["5-a",0.99],[B,0.01]]);V.addDefaultEdge("5-c","5-b",[["5-b",0.99],[B,0.01]]);V.addDefaultEdge("5-c","6-a",[["6-a",0.99],[B,0.01]]);V.addDefaultEdge("5-a","5-b",[["5-b",0.99],[B,0.01]]);V.addDefaultEdge("5-a","5-c",[["5-c",0.99],[B,0.01]]);V.addDefaultEdge("5-a","6-a",[["6-a",0.99],[B,0.01]]);V.addDefaultEdge("5-b","5-a",[["5-a",0.99],[B,0.01]]);V.addDefaultEdge("5-b","6-a",[["6-a",0.99],[B,0.01]]);V.addDefaultEdge("6-a","7-a",[["7-a",0.99],[B,0.01]]);V.addDefaultEdge("7-a","end",[["end",0.99],[B,0.01]]);var S0={"4-b":["--------------------XX","--------------------XX","--------------------XX","--------------------XX","--------------------XX","-----------X-H---o--XX","-----------------o--XX","---------o----------XX","-----------XXXXXXX--XX","--------------------XX","-------X------------XX","------XXX-----------XX","-----XXXXX-----------o","----XXXXXXX-----------","XXXXXXXXXXXXXXXX--XXXX"],"2-b":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-----------o----------","--------------------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"3-b":["----------------------","----------------------","----------------------","----------------------","----------o-----------","----------------------","--------XXXXX---------","--------V---V---------","----------o-----------","----------------------","------XXXXXXXXX-------","----------------------","----------o---------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"4-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------XXX---","-----------------V----","-------X---XX-----V---","------XX------o-V---o-","-----XXX--------------","XXXXXXXX---XXXXXXXXXXX"],"3-a":["----------------------","----------------------","----------------------","----------------------","-----------o----------","----------------------","---------XXXXX--------","-----------o----------","----------------------","-------X-H-----X------","---XX--XXXXXXXXX--XX--","----------------------","-------V---o---V----o-","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],end:["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----oooooooooooooooooo","XXXXXXXXXXXXXXXXXXXXXX"],"2-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-------XXXXXXXX-------","----------------------","-------V--o---V-----o-","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],"1-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","--------------X-------","-----o-----o--X------o","XXXXXXXXXXXXXXXXXXXXXX"],"5-c":["o-----------------------------","------------------------------","X---XX------------------------","------------------------------","------------------------------","XX----------------------------","--------XXXXX-----------------","--------Xoo-------------------","XXX-----Xoo----o------------o-","--------X---------------------","--------XXX---XX----XX----XXXX","XXXX--------------------------","------------------------------","------------------------------","XXXXXXXX----------------------"],"5-a":["--------XXXXXXXXXXXXXX--------","-------------------ooX--------","---------------------X--------","---------------------X--------","------------------XXXX--------","------------------X-----------","-----------o--XXXXX-----------","------------------------------","---------XX-----------------o-","------------------------------","--------------XX---XXX----XXXX","------------------------------","----------XX------------------","------------------------------","XXXXXXXX----------------------"],"5-b":["------------------------------","-o----------------------------","------------------------------","XXX---------------------------","------------------------------","-----XXX----------------------","------------------------------","-----------XXX----------------","-o--------------------------o-","------XXX---------------------","XXX-----------------------XXXX","------------XXX-------XX------","------------------XX----------","------------------------------","XXXXXXXX---XXXXX--------------"],"6-a":["----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","-------oo---XXXXXXXX----------","-o----------XXXXXXXX----------","------XXXX--XXXXXXXX----------","--------------o---------------","XXXX--------------------------","-------------XXXX-----------o-","---------------------XX-------","XXXXXXXX-----------------XXXXX"],"7-a":["-------------------V---------------","-----------------o---o-------------","------------X-H------------H--XXX--","-----V------XXXXXXXXXXXXXXXXXXXXX--","--------XX----o--------------------","-----------------------------------","-----------XXXXXX---Ho-------------","-----------------------------------","-------------V------XX--------H----","-----------------------------------","XX--------o------XXXXX----H--------","-----------------------------------","---X----H----H-X-----------------o-","---XXXXXXXXXXXXX-------------------","XXXX--------------------------XXXXX"]};class k0{playerIsOnLastLevel=!1;keys;columnsPerLevel;lossesInARow=0;playerWonLastRound=!1;constructor(){}update(X,q){const F=this.keys.length,f=[];if(X){for(let J=0;J<F;++J)f.push(1);this.lossesInARow=0}else{let J=q;for(let $=0;$<F;++$)if(J>this.columnsPerLevel[$])f[$]=1,J-=this.columnsPerLevel[$];else{f[$]=J/this.columnsPerLevel[$];break}}const Q=f.length;for(let J=0;J<Q;++J){const $=f[J],k=this.keys[J],w=V.getNode(k);if($===1){if(!V.hasEdge(Y,k))V.addDefaultEdge(Y,k,[[k,1],[B,0]])}++w.visitedCount,w.sumPercentCompleted+=$,w.updateReward();const j=w.sumPercentCompleted/w.visitedCount,x=1-j;V.mapEdges((u)=>{if(u.tgt===k)u.probability[0][1]=j,u.probability[1][1]=x})}if(!X){++this.lossesInARow;for(let J=0;J<this.lossesInARow;++J){const $=V.getNode(Y).neighbors,k=$.length;if(k===1)break;let w="",j=-1e4;for(let x=0;x<k;++x){const u=$[x],O0=V.getNode(u).depth;if(O0>j)w=u,j=O0}console.log("removing edge:",w,j),V.removeEdge(Y,w)}console.log("=======================")}this.playerWonLastRound=X}get(X){const q=z0(V,0.95,!0,!0,20);if(this.columnsPerLevel=[],this.playerWonLastRound)this.keys=[I(q[Y])];else this.keys=[Y];for(let Q=0;Q<X;++Q){const J=I(q[this.keys[Q]]);if(this.keys.push(J),J===G)break}this.keys.splice(0,1),this.playerIsOnLastLevel=this.keys.includes(G);const F=Array(H).fill(""),f=this.keys.length;for(let Q=0;Q<f;++Q){const J=S0[this.keys[Q]];this.columnsPerLevel.push(J[0].length);for(let $=0;$<H;++$)F[$]+=J[$]}return F}}class w0 extends O{ctx;transitionScene;camera;numCoins;levelDirector;staticEntities;dynamicEntities;constructor(X,q){super();this.ctx=X,this.transitionScene=q,this.camera=new e,this.levelDirector=new k0}onEnter(){this.dynamicEntities=[],this.staticEntities=[],this.numCoins=0,this.dynamicEntities.push(new X0(2,12));const X=this.levelDirector.get(2),q=X.length;if(q!==H){console.error("Level should have 15 rows!");return}const F=X[0].length;for(let f=0;f<q;++f){const Q=X[f];if(F!==Q.length){console.error(`Every row in the level should have the same number of columns! (${F} !== ${Q.length}).`);return}for(let J=0;J<F;++J){const $=Q[J];if($==="X")this.staticEntities.push(new q0(J,f));else if($==="o")++this.numCoins,this.dynamicEntities.push(new F0(J,f));else if($==="H")this.dynamicEntities.push(new f0(J,f,F));else if($==="V")this.dynamicEntities.push(new Q0(J,f));else if($!=="-")console.error(`Unhandled tile type: ${Q[J]}`)}}}update(X){let q=this.dynamicEntities.length,F=0;for(;F<q;++F)if(this.dynamicEntities[F].dead)this.dynamicEntities.splice(F,1),--q,--F;const f=this.staticEntities.length;let Q;for(F=0;F<q;++F){const $=this.dynamicEntities[F];$.update(X),$.physicsUpdate(X);for(Q=F+1;Q<q;++Q)$.collision(this.dynamicEntities[Q]);for(Q=0;Q<f;++Q)$.collision(this.staticEntities[Q])}const J=this.dynamicEntities[0];if(J.coinsCollected>=this.numCoins)if(this.levelDirector.playerIsOnLastLevel)this.transitionScene.targetScene=g,this.changeScene=C;else this.transitionScene.targetScene=_,this.changeScene=C;if(J.dead)this.transitionScene.targetScene=d,this.changeScene=C}render(){this.ctx.clearRect(0,0,W,R),this.camera.update(this.dynamicEntities[0].pos.x);let X=this.staticEntities.length,q=0;for(;q<X;++q)this.staticEntities[q].render(this.ctx,this.camera);X=this.dynamicEntities.length;for(q=0;q<X;++q)this.dynamicEntities[q].render(this.ctx,this.camera)}_onExit(){const X=this.dynamicEntities[0];this.levelDirector.update(!X.dead,Math.floor(X.maxColumn))}}class B0 extends O{ctx;constructor(X){super();this.ctx=X}onEnter(){this.ctx.clearRect(0,0,W,R),this.ctx.font="30px Arial",this.ctx.fillStyle="white",this.ctx.fillText("You won! Congratulations!",170,R/2)}update(X){}render(){}_onExit(){}}class v0 extends O{targetScene=h;timer=0;ctx;constructor(X){super();this.ctx=X}onEnter(){}update(X){if(this.timer+=X,this.timer>0.6)this.changeScene=this.targetScene}render(){const X=this.timer/0.5;this.ctx.fillStyle=`rgba(0,0,0, ${X})`,this.ctx.fillRect(0,0,W,R)}_onExit(){this.timer=0}}class U0 extends O{ctx;transitionScene;constructor(X,q){super();this.ctx=X,this.transitionScene=q}onEnter(){v.clear(),this.ctx.fillStyle=M,this.ctx.font="48px Arial",this.ctx.fillText("YOU WON",250,200),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to keep going.",180,400)}update(X){if(v.isKeyDown(Z.SPACE))this.transitionScene.targetScene=D,this.changeScene=C}render(){}_onExit(){}}class j0 extends O{ctx;transitionScene;constructor(X,q){super();this.ctx=X,this.transitionScene=q}onEnter(){v.clear(),this.ctx.fillStyle="red",this.ctx.font="48px Arial",this.ctx.fillText("YOU LOST",243,200),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to try again.",195,400)}update(X){if(v.isKeyDown(Z.SPACE))this.transitionScene.targetScene=D,this.changeScene=C}render(){}_onExit(){}}class W0{canvas;ctx;currentScene;sceneManager;constructor(){this.canvas=document.createElement("canvas"),this.canvas.setAttribute("id","canvas"),this.canvas.width=W,this.canvas.height=R,this.ctx=this.canvas.getContext("2d"),document.getElementById("game").appendChild(this.canvas);const X=new v0(this.ctx);this.sceneManager=new a,this.sceneManager.registerScene(h,new t(this.ctx,X)),this.sceneManager.registerScene(D,new w0(this.ctx,X)),this.sceneManager.registerScene(g,new B0(this.ctx)),this.sceneManager.registerScene(C,X),this.sceneManager.registerScene(_,new U0(this.ctx,X)),this.sceneManager.registerScene(d,new j0(this.ctx,X)),this.currentScene=this.sceneManager.getScene(h),this.currentScene.onEnter()}start(){let X=0;const q=(F)=>{const f=Math.min(0.05,(F-X)/1000);X=F,this.currentScene.update(f),this.currentScene.render();const Q=this.currentScene.changeScene;if(Q!==void 0)this.currentScene.onExit(),this.currentScene=this.sceneManager.getScene(Q),this.currentScene.onEnter();window.requestAnimationFrame(q)};window.requestAnimationFrame(q)}}window.addEventListener("load",()=>{v.init(),new W0().start()});
