class a{scenes={};registerScene(X,f){if(this.scenes[X]===void 0)this.scenes[X]=f;else console.error(`Key "${X}" for scene already exists! Scene not added to SceneManager.`)}getScene(X){return this.scenes[X]}}class O{changeScene;onExit(){this.changeScene=void 0,this._onExit()}}var h="main menu",u="game",g="player won",C="transition",_="lost",d="won";var W=720,R=480,L=32,H=15,L0=17,p=20,N=30,C0=0.625,R0=0.9375,y=31,s=31,A0=0.96875,b0=0.96875,H0=16,Y0=16,x0=0.5,D0=0.5,l=25,E=15,m=0.78125,c=0.46875,Y="start",G="end",B="death";var Z;(function(z){z[z["LEFT"]=0]="LEFT";z[z["RIGHT"]=1]="RIGHT";z[z["DOWN"]=2]="DOWN";z[z["UP"]=3]="UP";z[z["A"]=4]="A";z[z["D"]=5]="D";z[z["E"]=6]="E";z[z["G"]=7]="G";z[z["H"]=8]="H";z[z["I"]=9]="I";z[z["Q"]=10]="Q";z[z["R"]=11]="R";z[z["S"]=12]="S";z[z["W"]=13]="W";z[z["SPACE"]=14]="SPACE";z[z["ESCAPE"]=15]="ESCAPE";z[z["ENTER"]=16]="ENTER";z[z["SHIFT"]=17]="SHIFT";z[z["INVALID"]=18]="INVALID"})(Z||(Z={}));class v{static _keys=[];static init(){for(let X=0;X<Object.keys(Z).length;++X)v._keys.push(!1);window.addEventListener("keydown",v.onKeyDown),window.addEventListener("keyup",v.onKeyUp)}static isKeyDown(...X){const f=X.length;for(let q=0;q<f;++q)if(v._keys[X[q]])return!0;return!1}static keyStrToKey(X){switch(X){case"Down":case"ArrowDown":return Z.DOWN;case"Up":case"ArrowUp":return Z.UP;case"Right":case"ArrowRight":return Z.RIGHT;case"Left":case"ArrowLeft":return Z.LEFT;case" ":case"Space":return Z.SPACE;case"Escape":return Z.ESCAPE;case"a":case"A":return Z.A;case"e":case"E":return Z.E;case"s":case"S":return Z.S;case"d":case"D":return Z.D;case"w":case"W":return Z.W;case"r":case"R":return Z.R;case"q":case"Q":return Z.Q;case"g":case"G":return Z.G;case"h":case"H":return Z.H;case"i":case"I":return Z.I;case"Shift":return Z.SHIFT;case"Enter":return Z.ENTER;default:return console.warn(`Unhandled key: ${X}.`),Z.INVALID}}static onKeyDown(X){const f=v.keyStrToKey(X.key);if(v._keys[f]=!0,f==Z.DOWN||f==Z.UP||f==Z.LEFT||f==Z.RIGHT)X.preventDefault();return!1}static onKeyUp(X){return v._keys[v.keyStrToKey(X.key)]=!1,!1}static clear(){for(let X=0;X<v._keys.length;++X)v._keys[X]=!1}}class A{x;y;constructor(X,f){this.x=X,this.y=f}copy(){return new A(this.x,this.y)}zero(){this.x=0,this.y=0}equals(X){return this.x==X.x&&this.y==X.y}add(X){return new A(this.x+X.x,this.y+X.y)}addInPlace(X){this.x+=X.x,this.y+=X.y}subtract(X){return new A(this.x-X.x,this.y-X.y)}subtractInPlace(X){this.x-=X.x,this.y-=X.y}scalarAdd(X){this.x+=X,this.y+=X}scalarSubtract(X){this.x-=X,this.y-=X}scalarMultiply(X){return new A(this.x*X,this.y*X)}scalarMultiplyInPlace(X){this.x*=X,this.y*=X}dot(X){return this.x*X.x+this.y+X.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}}var M="rgba(150,150,255,1)";var T0=Math.floor(W/L)-1;class t extends O{ctx;transitionScene;fakePlayerPos;sign;constructor(X,f){super();this.ctx=X,this.transitionScene=f,this.fakePlayerPos=new A(10,(H-2)*L),this.sign=1}onEnter(){this.ctx.clearRect(0,0,W,R),this.ctx.fillStyle=M,this.ctx.font="48px Arial",this.ctx.fillText("Recformer",247,100),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to start",220,R*0.55);const X=this.fakePlayerPos.y+L;this.ctx.strokeStyle="white";for(let f=0;f<25;++f)this.ctx.strokeRect(f*L,X,y,s);this.ctx.fillStyle=M}update(X){if(v.isKeyDown(Z.SPACE))this.transitionScene.targetScene=u,this.changeScene=C;const f=this.fakePlayerPos.x;if(f<1||f>T0)this.sign*=-1;this.fakePlayerPos.x+=X*this.sign}render(){const X=this.fakePlayerPos.x*L,f=(H-2)*L;this.ctx.clearRect(0,this.fakePlayerPos.y,W,N),this.ctx.fillRect(X,f,p,N)}_onExit(){}}class e{startCol=0;endCol=0;offsetX=0;colsPerScreen=Math.ceil(W/L);update(X){const f=X-this.colsPerScreen/2;this.startCol=Math.max(0,Math.floor(f)),this.endCol=this.startCol+this.colsPerScreen,this.offsetX=-f*L+this.startCol*L}columnToScreen(X){return(X-this.startCol)*L+this.offsetX}rowToScreen(X){return X*L}}function u0(X,f,q,F){const{x:Q,y:J}=X,$=Q+f.x,k=J+f.y,w=q.x,j=q.y,x=w+F.x,D=j+F.y;return Q<x&&$>w&&J<D&&k>j}class b{pos;size;type;dead=!1;velocity=new A(0,0);gravity=new A(0,100);constructor(X,f,q,F,Q){this.pos=new A(X,f),this.size=new A(q,F),this.type=Q}collision(X){if(u0(this.pos,this.size,X.pos,X.size))this.handleCollision(X),X.handleCollision(this)}physicsUpdate(X){this.velocity.addInPlace(this.gravity.scalarMultiply(X)),this.velocity.y=Math.min(this.velocity.y,30),this.pos.addInPlace(this.velocity.scalarMultiply(X))}}var r=0,P=1,i=2,S=3;var P0=6,I0=8,h0=0.4;class X0 extends b{movingRight=!1;movingLeft=!1;moveMod=0;jumpTime=0;squash=1;stretch=1;coinsCollected=0;maxColumn=0;constructor(X,f){super(X,f,C0,R0,r)}update(X){if(this.pos.y>L0){this.dead=!0,console.log("Player fell...");return}if(this.velocity.x=0,v.isKeyDown(Z.D,Z.RIGHT))this.movingRight=!0,this.velocity.x=P0,this.moveMod=Math.min(I0,this.moveMod+X);if(v.isKeyDown(Z.A,Z.LEFT))if(this.movingRight)this.movingRight=!1,this.velocity.x=0;else this.movingLeft=!0,this.velocity.x=-P0,this.moveMod=Math.min(I0,this.moveMod+X);if(this.jumpTime<h0&&v.isKeyDown(Z.SPACE,Z.UP)){if(this.jumpTime===0)this.velocity.y=-15;else if(this.jumpTime<0.2)this.velocity.y-=2;this.squash=Math.min(1.03,this.squash+0.01),this.stretch=Math.max(0.97,this.stretch-0.01),this.jumpTime+=X}else if(this.squash!=this.stretch)this.squash+=0.01,this.stretch-=0.01;this.maxColumn=Math.max(this.pos.x,this.maxColumn)}handleCollision(X){switch(X.type){case P:{const f=this.pos.add(this.size.scalarMultiply(0.5)),q=X.pos.add(X.size.scalarMultiply(0.5)),F=f.subtract(q);this.size.add(X.size).scalarMultiply(0.5);const J=Math.abs(Math.atan(F.y/F.x));if(!(J<0.96&&J>0.698)&&Math.abs(F.x/this.size.x)>Math.abs(F.y/this.size.y))if(F.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x;else if(F.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y,this.velocity.y=0,this.jumpTime=0,this.stretch=1.01,this.squash=0.99;break}case i:{++this.coinsCollected;break}case S:{this.dead=!0,console.log("Ran into an enemy! :/");break}default:{console.warn(`Player unhandled collision type: ${X.type}.`);break}}}render(X,f){X.fillStyle=M;const q=f.columnToScreen(this.pos.x),F=f.rowToScreen(this.pos.y),Q=N*this.squash,J=p*this.stretch;if(this.movingRight){let $=new Path2D;$.moveTo(q,F),$.lineTo(q-this.moveMod,F+Q),$.lineTo(q+J-this.moveMod,F+Q),$.lineTo(q+J,F),$.closePath(),X.fill($,"evenodd"),this.movingRight=!1}else if(this.movingLeft){let $=new Path2D;$.moveTo(q,F),$.lineTo(q+this.moveMod,F+Q),$.lineTo(q+J+this.moveMod,F+Q),$.lineTo(q+J,F),$.closePath(),X.fill($,"evenodd"),this.movingLeft=!1}else X.fillRect(q,F,J,Q)}}class f0 extends b{constructor(X,f){super(X,f,A0,b0,P)}update(X){}handleCollision(X){}render(X,f){X.strokeStyle="white",X.strokeRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),y,s)}}class q0 extends b{minY;maxY;yMod;constructor(X,f){super(X+0.25,f+0.25,x0,D0,i);this.gravity.y=0,this.yMod=Math.random()*0.5,this.maxY=f+0.3,this.minY=f+0.15,this.velocity.y=this.yMod}update(X){if(this.pos.y>=this.maxY)this.velocity.y=-this.yMod;else if(this.pos.y<=this.minY)this.velocity.y=this.yMod}handleCollision(X){if(X.type===r)this.dead=!0}render(X,f){X.fillStyle="yellow",X.fillRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),H0,Y0)}}class F0 extends b{maxColumns;constructor(X,f,q){super(X+0.25,f+0.25,m,c,S);this.velocity.x=3,this.gravity.y=0,this.maxColumns=q}update(X){if(this.pos.x<0||this.pos.x>this.maxColumns)this.velocity.x*=-1}handleCollision(X){if(X.type===P){const f=this.pos.add(this.size.scalarMultiply(0.5)),q=X.pos.add(X.size.scalarMultiply(0.5)),F=f.subtract(q);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(F.x/this.size.x)>Math.abs(F.y/this.size.y))if(this.velocity.x*=-1,F.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x}}render(X,f){X.fillStyle="red",X.fillRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),l,E)}}class Q0 extends b{constructor(X,f){super(X,f+0.1,c,m,S);this.velocity.y=3,this.gravity.y=0,this.pos.x+=0.25}update(X){if(this.pos.y<0||this.pos.y>=H)this.velocity.y*=-1}handleCollision(X){if(X.type===P){const f=this.pos.add(this.size.scalarMultiply(0.5)),q=X.pos.add(X.size.scalarMultiply(0.5)),F=f.subtract(q);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(F.x/this.size.x)<Math.abs(F.y/this.size.y))if(this.velocity.y*=-1,F.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y}}render(X,f){X.fillStyle="red",X.fillRect(f.columnToScreen(this.pos.x),f.rowToScreen(this.pos.y),E,l)}}class $0{src;tgt;probability;constructor(X,f,q){this.src=X,this.tgt=f,this.probability=q}}class K{name;reward;utility;isTerminal;neighbors;constructor(X,f,q,F,Q){this.name=X,this.reward=f,this.utility=q,this.isTerminal=F,this.neighbors=Q}}class o{nodes;edges;constructor(){this.nodes={},this.edges={}}getNode(X){return this.nodes[X]}hasNode(X){return X in this.nodes}addNode(X){this.nodes[X.name]=X}addDefaultNode(X,f=1,q=0,F=!1,Q=null){if(Q==null)Q=[];this.nodes[X]=new K(X,f,q,F,Q)}removeNode(X){const f=[];for(let q of Object.values(this.edges)){if(q.src==X||q.tgt==X)f.push(q);const F=q.probability;let Q=-1;for(let w=0;w<F.length;w++){const[j,x]=F[w];if(j==X){Q=w;break}}if(Q==-1)continue;const J=F[Q][1];F.splice(Q,1);const $=F.length,k=J/$;q.probability=F.map(([w,j])=>[w,j+k])}for(let q of f)this.removeEdge(q.src,q.tgt);delete this.nodes[X]}getEdge(X,f){return this.edges[`${X},${f}`]}hasEdge(X,f){return`${X},${f}`in this.edges}addEdge(X){this.edges[`${X.src},${X.tgt}`]=X;const f=this.nodes[X.src].neighbors;if(!f.includes(X.tgt))f.push(X.tgt)}addDefaultEdge(X,f,q=null){if(q==null)q=[[f,1]];this.addEdge(new $0(X,f,q))}removeEdge(X,f){const q=this.nodes[X],F=q.neighbors.indexOf(f);q.neighbors.splice(F,1),delete this.edges[`${X},${f}`]}neighbors(X){return this.nodes[X].neighbors}setNodeUtilities(X){for(let[f,q]of Object.entries(X))this.nodes[f].utility=q}utility(X){return this.nodes[X].utility}reward(X){return this.nodes[X].reward}isTerminal(X){return this.nodes[X].isTerminal}mapNodes(X){for(let f of Object.values(this.nodes))X(f)}mapEdges(X){for(let f of Object.values(this.edges))X(f)}}function I(X){return X[Math.floor(Math.random()*X.length)]}function T(X,f,q,F){const Q=X.getEdge(f,q).probability,J=Q.length;let $=0;for(let k=0;k<J;++k){const[w,j]=Q[k];$+=j*(X.reward(w)+F*X.utility(w))}return $}function n(X,f,q){const F=X.getNode(f);if(F.isTerminal)return 0;const Q=F.neighbors,J=Q.length;let $=(-Infinity);for(let k=0;k<J;++k)$=Math.max($,T(X,f,Q[k],q));return $}function J0(X){for(let f in X.nodes)X.nodes[f].utility=0}function V0(X){const f={};for(let q in X.nodes)if(!X.getNode(q).isTerminal)f[q]=[...X.neighbors(q)];return f}function Z0(X,f){const q={};for(let F in X.nodes){if(X.getNode(F).isTerminal)continue;let Q=(-Infinity),J=[];for(let $ of X.neighbors(F)){const k=T(X,F,$,f);if(k===Q)J.push($);else if(k>Q)Q=k,J.length=0,J.push($)}q[F]=J}return q}var N0=function(X,f,q,F){for(let Q=0;Q<F;++Q)for(let J in X.nodes){const $=X.getNode(J);if(!$.isTerminal)$.utility=T(X,J,I(f[J]),q)}},G0=function(X,f,q,F){for(let Q=0;Q<F;++Q){const J={};for(let $ in X.nodes)if(!X.getNode($).isTerminal)J[$]=T(X,$,I(f[$]),q);X.setNodeUtilities(J)}},K0=function(X,f,q,F){for(let Q=0;Q<F;++Q)for(let J in X.nodes)X.getNode(J).utility=n(X,J,q)},g0=function(X,f,q,F){for(let Q=0;Q<F;++Q){const J={};for(let $ in X.nodes)J[$]=n(X,$,q);X.setNodeUtilities(J)}},M0=function(X,f,q){let F=!1;for(let Q in X.nodes){if(X.getNode(Q).isTerminal)continue;let J=null,$=(-Infinity);for(let k of X.neighbors(Q)){const w=T(X,Q,k,q);if(w===$);else if(w>$)J=k,$=w}if(I(f[Q])!==J)f[Q].length=0,f[Q].push(J),F=!0}return F};function z0(X,f,q=!1,F=!1,Q=10,J=!0){if(J)J0(X);const $=V0(X);let k;if(q&&F)k=N0;else if(q&&!F)k=G0;else if(!q&&F)k=K0;else k=g0;let w=!0;while(w)k(X,$,f,Q),w=M0(X,$,f);return k(X,$,f,Q),M0(X,$,f),Z0(X,f)}class U extends K{visitedCount;sumPercentCompleted;depth;designerReward;playerReward;constructor(X,f,q,F,Q,J){super(X,f,q,F,Q);this.designerReward=f,this.playerReward=0,this.depth=J,this.visitedCount=1,this.sumPercentCompleted=1}updateReward(){this.reward=this.designerReward*this.visitedCount}}var V=new o;V.addNode(new U(Y,0,0,!1,[],-1));V.addNode(new U(B,-1,0,!0,[],-1));V.addNode(new U(G,1,0,!0,[],-1));V.addNode(new U("1-a",-0.8,0,!1,[],1));V.addNode(new U("2-a",-0.7,0,!1,[],2));V.addNode(new U("2-b",-0.7,0,!1,[],2));V.addNode(new U("3-a",-0.6,0,!1,[],3));V.addNode(new U("3-b",-0.6,0,!1,[],3));V.addNode(new U("4-a",-0.3,0,!1,[],4));V.addNode(new U("4-b",-0.3,0,!1,[],4));V.addNode(new U("5-a",-0.2,0,!1,[],5));V.addNode(new U("5-b",-0.2,0,!1,[],5));V.addNode(new U("5-c",-0.2,0,!1,[],5));V.addNode(new U("6-a",-0.1,0,!1,[],6));V.addNode(new U("7-a",-0,0,!1,[],7));V.addNode(new U("6-b",-0.1,0,!1,[],6));V.addDefaultEdge(Y,"1-a",[["1-a",0.99],[B,0.01]]);V.addDefaultEdge("1-a","2-a",[["2-a",0.99],[B,0.01]]);V.addDefaultEdge("1-a","2-b",[["2-b",0.99],[B,0.01]]);V.addDefaultEdge("2-a","3-b",[["3-b",0.99],[B,0.01]]);V.addDefaultEdge("2-b","3-a",[["3-a",0.99],[B,0.01]]);V.addDefaultEdge("3-a","4-a",[["4-a",0.99],[B,0.01]]);V.addDefaultEdge("3-a","4-b",[["4-b",0.99],[B,0.01]]);V.addDefaultEdge("3-b","4-a",[["4-a",0.99],[B,0.01]]);V.addDefaultEdge("3-b","4-b",[["4-b",0.99],[B,0.01]]);V.addDefaultEdge("4-a","5-a",[["5-a",0.99],[B,0.01]]);V.addDefaultEdge("4-a","5-b",[["5-b",0.99],[B,0.01]]);V.addDefaultEdge("4-a","5-c",[["5-c",0.99],[B,0.01]]);V.addDefaultEdge("4-b","5-a",[["5-a",0.99],[B,0.01]]);V.addDefaultEdge("4-b","5-b",[["5-b",0.99],[B,0.01]]);V.addDefaultEdge("4-b","5-c",[["5-c",0.99],[B,0.01]]);V.addDefaultEdge("5-a","6-a",[["6-a",0.99],[B,0.01]]);V.addDefaultEdge("5-a","6-b",[["6-b",0.99],[B,0.01]]);V.addDefaultEdge("5-b","6-a",[["6-a",0.99],[B,0.01]]);V.addDefaultEdge("5-b","6-b",[["6-b",0.99],[B,0.01]]);V.addDefaultEdge("5-c","6-a",[["6-a",0.99],[B,0.01]]);V.addDefaultEdge("5-c","6-b",[["6-b",0.99],[B,0.01]]);V.addDefaultEdge("6-a","7-a",[["7-a",0.99],[B,0.01]]);V.addDefaultEdge("7-a","end",[["end",0.99],[B,0.01]]);V.addDefaultEdge("6-b","7-a",[["7-a",0.99],[B,0.01]]);var S0={"1-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","--------------X-------","-----o-----o--X------o","XXXXXXXXXXXXXXXXXXXXXX"],"2-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-------XXXXXXXX-------","----------------------","-------V--o---V-----o-","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],"2-b":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-----------o----------","--------------------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"3-a":["----------------------","----------------------","----------------------","----------------------","-----------o----------","----------------------","---------XXXXX--------","-----------o----------","----------------------","-------X-H-----X------","---XX--XXXXXXXXX--XX--","----------------------","-------V---o---V----o-","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],"3-b":["----------------------","----------------------","----------------------","----------------------","----------o-----------","----------------------","--------XXXXX---------","--------V---V---------","----------o-----------","----------------------","------XXXXXXXXX-------","----------------------","----------o---------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"4-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------XXX---","-----------------V----","-------X---XX-----V---","------XX------o-V---o-","-----XXX--------------","XXXXXXXX---XXXXXXXXXXX"],"4-b":["--------------------XX","--------------------XX","--------------------XX","--------------------XX","--------------------XX","-----------X-H---o--XX","-----------------o--XX","---------o----------XX","-----------XXXXXXX--XX","--------------------XX","-------X------------XX","------XXX-----------XX","-----XXXXX-----------o","----XXXXXXX-----------","XXXXXXXXXXXXXXXX--XXXX"],"5-a":["--------XXXXXXXXXXXXXX--------","-------------------ooX--------","---------------------X--------","---------------------X--------","------------------XXXX--------","------------------X-----------","-----------o--XXXXX-----------","------------------------------","---------XX-----------------o-","------------------------------","--------------XX---XXX----XXXX","------------------------------","----------XX------------------","------------------------------","XXXXXXXX----------------------"],"5-b":["------------------------------","-o----------------------------","------------------------------","XXX---------------------------","------------------------------","-----XXX----------------------","------------------------------","-----------XXX----------------","-o--------------------------o-","------XXX---------------------","XXX-----------------------XXXX","------------XXX-------XX------","------------------XX----------","------------------------------","XXXXXXXX---XXXXX--------------"],"5-c":["o-----------------------------","------------------------------","X---XX------------------------","------------------------------","------------------------------","XX----------------------------","--------XXXXX-----------------","--------Xoo-------------------","XXX-----Xoo----o------------o-","--------X---------------------","--------XXX---XX----XX----XXXX","XXXX--------------------------","------------------------------","------------------------------","XXXXXXXX----------------------"],"6-a":["----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","-------oo---XXXXXXXX----------","-o----------XXXXXXXX----------","------XXXX--XXXXXXXX----------","--------------o---------------","XXXX--------------------------","-------------XXXX-----------o-","---------------------XX-------","XXXXXXXX-----------------XXXXX"],"7-a":["-------------------V---------------","-----------------o---o-------------","------------X-H------------H--XXX--","-----V------XXXXXXXXXXXXXXXXXXXXX--","--------XX----o--------------------","-----------------------------------","-----------XXXXXX---Ho-------------","-----------------------------------","-------------V------XX--------H----","-----------------------------------","XX--------o------XXXXX----H--------","-----------------------------------","---X----H----H-X-----------------o-","---XXXXXXXXXXXXX-------------------","XXXX--------------------------XXXXX"],end:["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----oooooooooooooooooo","XXXXXXXXXXXXXXXXXXXXXX"],"6-b":["----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX--o-------","-o--------XXXXXXXXXX----------","----------XXXXXXXXXX--X-------","----------XXXXXXXXXX----------","XXX-------XXXXXXXXXXX---------","------XX-----oooo-----------o-","------------------------------","XXXX--------XXXXXX---XX---XXXX"]};class k0{playerIsOnLastLevel=!1;keys;columnsPerLevel;lossesInARow=0;playerWonLastRound=!1;constructor(){}update(X,f){const q=this.keys.length,F=[];if(X){for(let J=0;J<q;++J)F.push(1);this.lossesInARow=0}else{let J=f;for(let $=0;$<q;++$)if(J>this.columnsPerLevel[$])F[$]=1,J-=this.columnsPerLevel[$];else{F[$]=J/this.columnsPerLevel[$];break}}const Q=F.length;for(let J=0;J<Q;++J){const $=F[J],k=this.keys[J],w=V.getNode(k);if($===1){if(!V.hasEdge(Y,k))V.addDefaultEdge(Y,k,[[k,1],[B,0]])}++w.visitedCount,w.sumPercentCompleted+=$,w.updateReward();const j=w.sumPercentCompleted/w.visitedCount,x=1-j;V.mapEdges((D)=>{if(D.tgt===k)D.probability[0][1]=j,D.probability[1][1]=x})}if(!X){++this.lossesInARow;for(let J=0;J<this.lossesInARow;++J){const $=V.getNode(Y).neighbors,k=$.length;if(k===1)break;let w="",j=-1e4;for(let x=0;x<k;++x){const D=$[x],O0=V.getNode(D).depth;if(O0>j)w=D,j=O0}console.log("removing edge:",w,j),V.removeEdge(Y,w)}console.log("=======================")}this.playerWonLastRound=X}get(X){const f=z0(V,0.95,!0,!0,20);if(this.columnsPerLevel=[],this.playerWonLastRound)this.keys=[I(f[Y])];else this.keys=[Y];for(let Q=0;Q<X;++Q){const J=I(f[this.keys[Q]]);if(this.keys.push(J),J===G)break}this.keys.splice(0,1),this.playerIsOnLastLevel=this.keys.includes(G);const q=Array(H).fill(""),F=this.keys.length;for(let Q=0;Q<F;++Q){const J=S0[this.keys[Q]];this.columnsPerLevel.push(J[0].length);for(let $=0;$<H;++$)q[$]+=J[$]}return q}}class w0 extends O{ctx;transitionScene;camera;numCoins;levelDirector;staticEntities;dynamicEntities;constructor(X,f){super();this.ctx=X,this.transitionScene=f,this.camera=new e,this.levelDirector=new k0}onEnter(){this.dynamicEntities=[],this.staticEntities=[],this.numCoins=0,this.dynamicEntities.push(new X0(2,12));const X=this.levelDirector.get(2),f=X.length;if(f!==H){console.error("Level should have 15 rows!");return}const q=X[0].length;for(let F=0;F<f;++F){const Q=X[F];if(q!==Q.length){console.error(`Every row in the level should have the same number of columns! (${q} !== ${Q.length}).`);return}for(let J=0;J<q;++J){const $=Q[J];if($==="X")this.staticEntities.push(new f0(J,F));else if($==="o")++this.numCoins,this.dynamicEntities.push(new q0(J,F));else if($==="H")this.dynamicEntities.push(new F0(J,F,q));else if($==="V")this.dynamicEntities.push(new Q0(J,F));else if($!=="-")console.error(`Unhandled tile type: ${Q[J]}`)}}}update(X){let f=this.dynamicEntities.length,q=0;for(;q<f;++q)if(this.dynamicEntities[q].dead)this.dynamicEntities.splice(q,1),--f,--q;const F=this.staticEntities.length;let Q;for(q=0;q<f;++q){const $=this.dynamicEntities[q];$.update(X),$.physicsUpdate(X);for(Q=q+1;Q<f;++Q)$.collision(this.dynamicEntities[Q]);for(Q=0;Q<F;++Q)$.collision(this.staticEntities[Q])}const J=this.dynamicEntities[0];if(J.coinsCollected>=this.numCoins)if(this.levelDirector.playerIsOnLastLevel)this.transitionScene.targetScene=g,this.changeScene=C;else this.transitionScene.targetScene=d,this.changeScene=C;if(J.dead)this.transitionScene.targetScene=_,this.changeScene=C}render(){this.ctx.clearRect(0,0,W,R),this.camera.update(this.dynamicEntities[0].pos.x);let X=this.staticEntities.length,f=0;for(;f<X;++f)this.staticEntities[f].render(this.ctx,this.camera);X=this.dynamicEntities.length;for(f=0;f<X;++f)this.dynamicEntities[f].render(this.ctx,this.camera)}_onExit(){const X=this.dynamicEntities[0];this.levelDirector.update(!X.dead,Math.floor(X.maxColumn))}}class B0 extends O{ctx;constructor(X){super();this.ctx=X}onEnter(){this.ctx.clearRect(0,0,W,R),this.ctx.font="30px Arial",this.ctx.fillStyle="white",this.ctx.fillText("You won! Congratulations!",170,R/2)}update(X){}render(){}_onExit(){}}class v0 extends O{targetScene=h;timer=0;ctx;constructor(X){super();this.ctx=X}onEnter(){}update(X){if(this.timer+=X,this.timer>0.6)this.changeScene=this.targetScene}render(){const X=this.timer/0.5;this.ctx.fillStyle=`rgba(0,0,0, ${X})`,this.ctx.fillRect(0,0,W,R)}_onExit(){this.timer=0}}class U0 extends O{ctx;transitionScene;constructor(X,f){super();this.ctx=X,this.transitionScene=f}onEnter(){v.clear(),this.ctx.fillStyle=M,this.ctx.font="48px Arial",this.ctx.fillText("YOU WON",250,200),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to keep going.",180,400)}update(X){if(v.isKeyDown(Z.SPACE))this.transitionScene.targetScene=u,this.changeScene=C}render(){}_onExit(){}}class j0 extends O{ctx;transitionScene;constructor(X,f){super();this.ctx=X,this.transitionScene=f}onEnter(){v.clear(),this.ctx.fillStyle="red",this.ctx.font="48px Arial",this.ctx.fillText("YOU LOST",243,200),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to try again.",195,400)}update(X){if(v.isKeyDown(Z.SPACE))this.transitionScene.targetScene=u,this.changeScene=C}render(){}_onExit(){}}class W0{canvas;ctx;currentScene;sceneManager;constructor(){this.canvas=document.createElement("canvas"),this.canvas.setAttribute("id","canvas"),this.canvas.width=W,this.canvas.height=R,this.ctx=this.canvas.getContext("2d"),document.getElementById("game").appendChild(this.canvas);const X=new v0(this.ctx);this.sceneManager=new a,this.sceneManager.registerScene(h,new t(this.ctx,X)),this.sceneManager.registerScene(u,new w0(this.ctx,X)),this.sceneManager.registerScene(g,new B0(this.ctx)),this.sceneManager.registerScene(C,X),this.sceneManager.registerScene(d,new U0(this.ctx,X)),this.sceneManager.registerScene(_,new j0(this.ctx,X)),this.currentScene=this.sceneManager.getScene(h),this.currentScene.onEnter()}start(){let X=0;const f=(q)=>{const F=Math.min(0.05,(q-X)/1000);X=q,this.currentScene.update(F),this.currentScene.render();const Q=this.currentScene.changeScene;if(Q!==void 0)this.currentScene.onExit(),this.currentScene=this.sceneManager.getScene(Q),this.currentScene.onEnter();window.requestAnimationFrame(f)};window.requestAnimationFrame(f)}}window.addEventListener("load",()=>{v.init(),new W0().start()});
