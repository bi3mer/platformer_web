class r{scenes={};registerScene(X,q){if(this.scenes[X]===void 0)this.scenes[X]=q;else console.error(`Key "${X}" for scene already exists! Scene not added to SceneManager.`)}getScene(X){return this.scenes[X]}}class S{changeScene;onExit(){this.changeScene=void 0,this._onExit()}}var D="main menu",h="game",G="player won";var L=720,A=480,j=32,C=15,wX=17,_=20,T=30,zX=0.625,vX=0.9375,g=31,d=31,UX=0.96875,WX=0.96875,jX=16,LX=16,OX=0.5,RX=0.5,p=25,s=15,y=0.78125,l=0.46875,Y="start",M="end",z="death";var k;(function(Z){Z[Z["LEFT"]=0]="LEFT";Z[Z["RIGHT"]=1]="RIGHT";Z[Z["DOWN"]=2]="DOWN";Z[Z["UP"]=3]="UP";Z[Z["A"]=4]="A";Z[Z["D"]=5]="D";Z[Z["E"]=6]="E";Z[Z["G"]=7]="G";Z[Z["H"]=8]="H";Z[Z["I"]=9]="I";Z[Z["Q"]=10]="Q";Z[Z["R"]=11]="R";Z[Z["S"]=12]="S";Z[Z["W"]=13]="W";Z[Z["SPACE"]=14]="SPACE";Z[Z["ESCAPE"]=15]="ESCAPE";Z[Z["ENTER"]=16]="ENTER";Z[Z["SHIFT"]=17]="SHIFT";Z[Z["INVALID"]=18]="INVALID"})(k||(k={}));class v{static _keys=[];static init(){for(let X=0;X<Object.keys(k).length;++X)v._keys.push(!1);window.addEventListener("keydown",v.onKeyDown),window.addEventListener("keyup",v.onKeyUp)}static isKeyDown(...X){const q=X.length;for(let F=0;F<q;++F)if(v._keys[X[F]])return!0;return!1}static keyStrToKey(X){switch(X){case"Down":case"ArrowDown":return k.DOWN;case"Up":case"ArrowUp":return k.UP;case"Right":case"ArrowRight":return k.RIGHT;case"Left":case"ArrowLeft":return k.LEFT;case" ":case"Space":return k.SPACE;case"Escape":return k.ESCAPE;case"a":case"A":return k.A;case"e":case"E":return k.E;case"s":case"S":return k.S;case"d":case"D":return k.D;case"w":case"W":return k.W;case"r":case"R":return k.R;case"q":case"Q":return k.Q;case"g":case"G":return k.G;case"h":case"H":return k.H;case"i":case"I":return k.I;case"Shift":return k.SHIFT;case"Enter":return k.ENTER;default:return console.warn(`Unhandled key: ${X}.`),k.INVALID}}static onKeyDown(X){const q=v.keyStrToKey(X.key);if(v._keys[q]=!0,q==k.DOWN||q==k.UP||q==k.LEFT||q==k.RIGHT)X.preventDefault();return!1}static onKeyUp(X){return v._keys[v.keyStrToKey(X.key)]=!1,!1}static clear(){for(let X=0;X<v._keys.length;++X)v._keys[X]=!1}}class O{x;y;constructor(X,q){this.x=X,this.y=q}copy(){return new O(this.x,this.y)}zero(){this.x=0,this.y=0}equals(X){return this.x==X.x&&this.y==X.y}add(X){return new O(this.x+X.x,this.y+X.y)}addInPlace(X){this.x+=X.x,this.y+=X.y}subtract(X){return new O(this.x-X.x,this.y-X.y)}subtractInPlace(X){this.x-=X.x,this.y-=X.y}scalarAdd(X){this.x+=X,this.y+=X}scalarSubtract(X){this.x-=X,this.y-=X}scalarMultiply(X){return new O(this.x*X,this.y*X)}scalarMultiplyInPlace(X){this.x*=X,this.y*=X}dot(X){return this.x*X.x+this.y+X.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}}var N="rgba(150,150,255,1)";var uX=Math.floor(L/j)-1;class n extends S{ctx;fakePlayerPos;sign;constructor(X){super();this.ctx=X,this.fakePlayerPos=new O(10,(C-2)*j),this.sign=1}onEnter(){this.ctx.clearRect(0,0,L,A),this.ctx.fillStyle=N,this.ctx.font="48px Arial",this.ctx.fillText("Recformer",247,100),this.ctx.fillStyle="white",this.ctx.font="30px Arial",this.ctx.fillText("Press 'space' to start",220,A*0.55);const X=this.fakePlayerPos.y+j;this.ctx.strokeStyle="white";for(let q=0;q<25;++q)this.ctx.strokeRect(q*j,X,g,d);this.ctx.fillStyle=N}update(X){if(v.isKeyDown(k.SPACE))this.changeScene=h;const q=this.fakePlayerPos.x;if(q<1||q>uX)this.sign*=-1;this.fakePlayerPos.x+=X*this.sign}render(){const X=this.fakePlayerPos.x*j,q=(C-2)*j;this.ctx.clearRect(0,this.fakePlayerPos.y,L,T),this.ctx.fillRect(X,q,_,T)}_onExit(){}}class o{startCol=0;endCol=0;offsetX=0;colsPerScreen=Math.ceil(L/j);update(X){const q=X-this.colsPerScreen/2;this.startCol=Math.max(0,Math.floor(q)),this.endCol=this.startCol+this.colsPerScreen,this.offsetX=-q*j+this.startCol*j}columnToScreen(X){return(X-this.startCol)*j+this.offsetX}rowToScreen(X){return X*j}}function AX(X,q,F,f){const{x:Q,y:J}=X,$=Q+q.x,B=J+q.y,w=F.x,W=F.y,H=w+f.x,b=W+f.y;return Q<H&&$>w&&J<b&&B>W}class R{pos;size;type;dead=!1;velocity=new O(0,0);gravity=new O(0,100);constructor(X,q,F,f,Q){this.pos=new O(X,q),this.size=new O(F,f),this.type=Q}collision(X){if(AX(this.pos,this.size,X.pos,X.size))this.handleCollision(X),X.handleCollision(this)}physicsUpdate(X){this.velocity.addInPlace(this.gravity.scalarMultiply(X)),this.velocity.y=Math.min(this.velocity.y,30),this.pos.addInPlace(this.velocity.scalarMultiply(X))}}var E=0,u=1,c=2,I=3;var CX=6,YX=8,xX=0.4;class t extends R{movingRight=!1;movingLeft=!1;moveMod=0;jumpTime=0;squash=1;stretch=1;coinsCollected=0;maxColumn=0;constructor(X,q){super(X,q,zX,vX,E)}update(X){if(this.pos.y>wX){this.dead=!0,console.log("Player fell...");return}if(this.velocity.x=0,v.isKeyDown(k.D,k.RIGHT))this.movingRight=!0,this.velocity.x=CX,this.moveMod=Math.min(YX,this.moveMod+X);if(v.isKeyDown(k.A,k.LEFT))if(this.movingRight)this.movingRight=!1,this.velocity.x=0;else this.movingLeft=!0,this.velocity.x=-CX,this.moveMod=Math.min(YX,this.moveMod+X);if(this.jumpTime<xX&&v.isKeyDown(k.SPACE,k.UP)){if(this.jumpTime===0)this.velocity.y=-15;else if(this.jumpTime<0.2)this.velocity.y-=2;this.squash=Math.min(1.03,this.squash+0.01),this.stretch=Math.max(0.97,this.stretch-0.01),this.jumpTime+=X}else if(this.squash!=this.stretch)this.squash+=0.01,this.stretch-=0.01;this.maxColumn=Math.max(this.pos.x,this.maxColumn)}handleCollision(X){switch(X.type){case u:{const q=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),f=q.subtract(F);this.size.add(X.size).scalarMultiply(0.5);const J=Math.abs(Math.atan(f.y/f.x));if(!(J<0.96&&J>0.698)&&Math.abs(f.x/this.size.x)>Math.abs(f.y/this.size.y))if(f.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x;else if(f.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y,this.velocity.y=0,this.jumpTime=0,this.stretch=1.01,this.squash=0.99;break}case c:{++this.coinsCollected;break}case I:{this.dead=!0,console.log("Ran into an enemy! :/");break}default:{console.warn(`Player unhandled collision type: ${X.type}.`);break}}}render(X,q){X.fillStyle=N;const F=q.columnToScreen(this.pos.x),f=q.rowToScreen(this.pos.y),Q=T*this.squash,J=_*this.stretch;if(this.movingRight){let $=new Path2D;$.moveTo(F,f),$.lineTo(F-this.moveMod,f+Q),$.lineTo(F+J-this.moveMod,f+Q),$.lineTo(F+J,f),$.closePath(),X.fill($,"evenodd"),this.movingRight=!1}else if(this.movingLeft){let $=new Path2D;$.moveTo(F,f),$.lineTo(F+this.moveMod,f+Q),$.lineTo(F+J+this.moveMod,f+Q),$.lineTo(F+J,f),$.closePath(),X.fill($,"evenodd"),this.movingLeft=!1}else X.fillRect(F,f,J,Q)}}class a extends R{constructor(X,q){super(X,q,UX,WX,u)}update(X){}handleCollision(X){}render(X,q){X.strokeStyle="white",X.strokeRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),g,d)}}class e extends R{minY;maxY;yMod;constructor(X,q){super(X+0.25,q+0.25,OX,RX,c);this.gravity.y=0,this.yMod=Math.random()*0.5,this.maxY=q+0.3,this.minY=q+0.15,this.velocity.y=this.yMod}update(X){if(this.pos.y>=this.maxY)this.velocity.y=-this.yMod;else if(this.pos.y<=this.minY)this.velocity.y=this.yMod}handleCollision(X){if(X.type===E)this.dead=!0}render(X,q){X.fillStyle="yellow",X.fillRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),jX,LX)}}class XX extends R{maxColumns;constructor(X,q,F){super(X+0.25,q+0.25,y,l,I);this.velocity.x=3,this.gravity.y=0,this.maxColumns=F}update(X){if(this.pos.x<0||this.pos.x>this.maxColumns)this.velocity.x*=-1}handleCollision(X){if(X.type===u){const q=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),f=q.subtract(F);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(f.x/this.size.x)>Math.abs(f.y/this.size.y))if(this.velocity.x*=-1,f.x<0)this.pos.x=X.pos.x-this.size.x;else this.pos.x=X.pos.x+X.size.x}}render(X,q){X.fillStyle="red",X.fillRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),p,s)}}class qX extends R{constructor(X,q){super(X,q+0.1,l,y,I);this.velocity.y=3,this.gravity.y=0,this.pos.x+=0.25}update(X){if(this.pos.y<0||this.pos.y>=C)this.velocity.y*=-1}handleCollision(X){if(X.type===u){const q=this.pos.add(this.size.scalarMultiply(0.5)),F=X.pos.add(X.size.scalarMultiply(0.5)),f=q.subtract(F);if(this.size.add(X.size).scalarMultiply(0.5),Math.abs(f.x/this.size.x)<Math.abs(f.y/this.size.y))if(this.velocity.y*=-1,f.y>0)this.pos.y=X.pos.y+X.size.y;else this.pos.y=X.pos.y-this.size.y}}render(X,q){X.fillStyle="red",X.fillRect(q.columnToScreen(this.pos.x),q.rowToScreen(this.pos.y),s,p)}}class FX{src;tgt;probability;constructor(X,q,F){this.src=X,this.tgt=q,this.probability=F}}class K{name;reward;utility;isTerminal;neighbors;constructor(X,q,F,f,Q){this.name=X,this.reward=q,this.utility=F,this.isTerminal=f,this.neighbors=Q}}class m{nodes;edges;constructor(){this.nodes={},this.edges={}}getNode(X){return this.nodes[X]}hasNode(X){return X in this.nodes}addNode(X){this.nodes[X.name]=X}addDefaultNode(X,q=1,F=0,f=!1,Q=null){if(Q==null)Q=[];this.nodes[X]=new K(X,q,F,f,Q)}removeNode(X){const q=[];for(let F of Object.values(this.edges)){if(F.src==X||F.tgt==X)q.push(F);const f=F.probability;let Q=-1;for(let w=0;w<f.length;w++){const[W,H]=f[w];if(W==X){Q=w;break}}if(Q==-1)continue;const J=f[Q][1];f.splice(Q,1);const $=f.length,B=J/$;F.probability=f.map(([w,W])=>[w,W+B])}for(let F of q)this.removeEdge(F.src,F.tgt);delete this.nodes[X]}getEdge(X,q){return this.edges[`${X},${q}`]}hasEdge(X,q){return`${X},${q}`in this.edges}addEdge(X){this.edges[`${X.src},${X.tgt}`]=X;const q=this.nodes[X.src].neighbors;if(!q.includes(X.tgt))q.push(X.tgt)}addDefaultEdge(X,q,F=null){if(F==null)F=[[q,1]];this.addEdge(new FX(X,q,F))}removeEdge(X,q){const F=this.nodes[X],f=F.neighbors.indexOf(q);F.neighbors.splice(f,1),delete this.edges[`${X},${q}`]}neighbors(X){return this.nodes[X].neighbors}setNodeUtilities(X){for(let[q,F]of Object.entries(X))this.nodes[q].utility=F}utility(X){return this.nodes[X].utility}reward(X){return this.nodes[X].reward}isTerminal(X){return this.nodes[X].isTerminal}mapNodes(X){for(let q of Object.values(this.nodes))X(q)}mapEdges(X){for(let q of Object.values(this.edges))X(q)}}function x(X){return X[Math.floor(Math.random()*X.length)]}function P(X,q,F,f){const Q=X.getEdge(q,F).probability,J=Q.length;let $=0;for(let B=0;B<J;++B){const[w,W]=Q[B];$+=W*(X.reward(w)+f*X.utility(w))}return $}function i(X,q,F){const f=X.getNode(q);if(f.isTerminal)return 0;const Q=f.neighbors,J=Q.length;let $=(-Infinity);for(let B=0;B<J;++B)$=Math.max($,P(X,q,Q[B],F));return $}function fX(X){for(let q in X.nodes)X.nodes[q].utility=0}function QX(X){const q={};for(let F in X.nodes)if(!X.getNode(F).isTerminal)q[F]=[...X.neighbors(F)];return q}function $X(X,q){const F={};for(let f in X.nodes){if(X.getNode(f).isTerminal)continue;let Q=(-Infinity),J=[];for(let $ of X.neighbors(f)){const B=P(X,f,$,q);if(B===Q)J.push($);else if(B>Q)Q=B,J.length=0,J.push($)}F[f]=J}return F}var SX=function(X,q,F,f){for(let Q=0;Q<f;++Q)for(let J in X.nodes){const $=X.getNode(J);if(!$.isTerminal)$.utility=P(X,J,x(q[J]),F)}},DX=function(X,q,F,f){for(let Q=0;Q<f;++Q){const J={};for(let $ in X.nodes)if(!X.getNode($).isTerminal)J[$]=P(X,$,x(q[$]),F);X.setNodeUtilities(J)}},IX=function(X,q,F,f){for(let Q=0;Q<f;++Q)for(let J in X.nodes)X.getNode(J).utility=i(X,J,F)},PX=function(X,q,F,f){for(let Q=0;Q<f;++Q){const J={};for(let $ in X.nodes)J[$]=i(X,$,F);X.setNodeUtilities(J)}},HX=function(X,q,F){let f=!1;for(let Q in X.nodes){if(X.getNode(Q).isTerminal)continue;let J=null,$=(-Infinity);for(let B of X.neighbors(Q)){const w=P(X,Q,B,F);if(w===$);else if(w>$)J=B,$=w}if(x(q[Q])!==J)q[Q].length=0,q[Q].push(J),f=!0}return f};function JX(X,q,F=!1,f=!1,Q=10,J=!0){if(J)fX(X);const $=QX(X);let B;if(F&&f)B=SX;else if(F&&!f)B=DX;else if(!F&&f)B=IX;else B=PX;let w=!0;while(w)B(X,$,q,Q),w=HX(X,$,q);return B(X,$,q,Q),HX(X,$,q),$X(X,q)}class U extends K{visitedCount;sumPercentCompleted;designerReward;playerReward;constructor(X,q,F,f,Q){super(X,q,F,f,Q);this.designerReward=q,this.playerReward=0,this.visitedCount=1,this.sumPercentCompleted=1}updateReward(){this.reward=this.designerReward*this.visitedCount}}var V=new m;V.addNode(new U(Y,0,0,!1,[]));V.addNode(new U(z,-1,0,!0,[]));V.addNode(new U(M,1,0,!0,[]));V.addNode(new U("4-b",-0.5454545454545454,0,!1,[]));V.addNode(new U("2-b",-0.7272727272727273,0,!1,[]));V.addNode(new U("3-b",-0.6363636363636364,0,!1,[]));V.addNode(new U("4-a",-0.5454545454545454,0,!1,[]));V.addNode(new U("3-a",-0.6363636363636364,0,!1,[]));V.addNode(new U("2-a",-0.7272727272727273,0,!1,[]));V.addNode(new U("1-a",-0.8181818181818182,0,!1,[]));V.addNode(new U("5-c",-0.45454545454545453,0,!1,[]));V.addNode(new U("5-a",-0.45454545454545453,0,!1,[]));V.addNode(new U("5-b",-0.45454545454545453,0,!1,[]));V.addNode(new U("6-a",-0.2727272727272727,0,!1,[]));V.addNode(new U("7-a",-0.18181818181818182,0,!1,[]));V.addDefaultEdge("4-b","5-a",[["5-a",0.99],[z,0.01]]);V.addDefaultEdge("4-b","5-b",[["5-b",0.99],[z,0.01]]);V.addDefaultEdge("4-b","5-c",[["5-c",0.99],[z,0.01]]);V.addDefaultEdge("2-b","3-a",[["3-a",0.99],[z,0.01]]);V.addDefaultEdge("3-b","4-a",[["4-a",0.99],[z,0.01]]);V.addDefaultEdge("3-b","4-b",[["4-b",0.99],[z,0.01]]);V.addDefaultEdge("4-a","5-a",[["5-a",0.99],[z,0.01]]);V.addDefaultEdge("4-a","5-b",[["5-b",0.99],[z,0.01]]);V.addDefaultEdge("4-a","5-c",[["5-c",0.99],[z,0.01]]);V.addDefaultEdge("3-a","4-a",[["4-a",0.99],[z,0.01]]);V.addDefaultEdge("3-a","4-b",[["4-b",0.99],[z,0.01]]);V.addDefaultEdge("2-a","3-b",[["3-b",0.99],[z,0.01]]);V.addDefaultEdge(Y,"1-a",[["1-a",0.99],[z,0.01]]);V.addDefaultEdge("1-a","2-a",[["2-a",0.99],[z,0.01]]);V.addDefaultEdge("1-a","2-b",[["2-b",0.99],[z,0.01]]);V.addDefaultEdge("5-c","5-a",[["5-a",0.99],[z,0.01]]);V.addDefaultEdge("5-c","5-b",[["5-b",0.99],[z,0.01]]);V.addDefaultEdge("5-c","6-a",[["6-a",0.99],[z,0.01]]);V.addDefaultEdge("5-a","5-b",[["5-b",0.99],[z,0.01]]);V.addDefaultEdge("5-a","5-c",[["5-c",0.99],[z,0.01]]);V.addDefaultEdge("5-a","6-a",[["6-a",0.99],[z,0.01]]);V.addDefaultEdge("5-b","5-a",[["5-a",0.99],[z,0.01]]);V.addDefaultEdge("5-b","6-a",[["6-a",0.99],[z,0.01]]);V.addDefaultEdge("6-a","7-a",[["7-a",0.99],[z,0.01]]);V.addDefaultEdge("7-a","end",[["end",0.99],[z,0.01]]);var bX={"4-b":["--------------------XX","--------------------XX","--------------------XX","--------------------XX","--------------------XX","-----------X-H---o--XX","-----------------o--XX","---------o----------XX","-----------XXXXXXX--XX","--------------------XX","-------X------------XX","------XXX-----------XX","-----XXXXX-----------o","----XXXXXXX-----------","XXXXXXXXXXXXXXXX--XXXX"],"2-b":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-----------o----------","--------------------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"3-b":["----------------------","----------------------","----------------------","----------------------","----------o-----------","----------------------","--------XXXXX---------","--------V---V---------","----------o-----------","----------------------","------XXXXXXXXX-------","----------------------","----------o---------o-","-----X---H-----X------","XXXXXXXXXXXXXXXXXXXXXX"],"4-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------XXX---","-----------------V----","-------X---XX-----V---","------XX------o-V---o-","-----XXX--------------","XXXXXXXX---XXXXXXXXXXX"],"3-a":["----------------------","----------------------","----------------------","----------------------","----------o-----------","----------------------","--------XXXXX---------","----------o-----------","----------------------","-------X-H----X-------","-------XXXXXXXX--XX---","----------------------","-------V--o---V-----o-","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],end:["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----oooooooooooooooooo","XXXXXXXXXXXXXXXXXXXXXX"],"2-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","-------XXXXXXXX-------","----------------------","-------V--o---V-----o-","----------------------","XXXXXXXXXXXXXXXXXXXXXX"],"1-a":["----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","----------------------","--------------X-------","-----o-----o--X------o","XXXXXXXXXXXXXXXXXXXXXX"],"5-c":["o-----------------------------","------------------------------","X---XX------------------------","------------------------------","--------XX--------------------","XX----------------------------","--------XXXXX-----------------","--------Xoo-------------------","XXX-----Xoo----o------------o-","--------X---------------------","--------XXX---XX----XX----XXXX","XXXX--------------------------","------------------------------","------------------------------","XXXXXXXX----------------------"],"5-a":["--------XXXXXXXXXXXXXX--------","-------------------ooX--------","---------------------X--------","---------------------X--------","------------------XXXX--------","------------------X-----------","-----------o--XXXXX-----------","------------------------------","---------XX-----------------o-","------------------------------","--------------XX---XXX----XXXX","------------------------------","----------XX------------------","------------------------------","XXXXXXXX----------------------"],"5-b":["------------------------------","-o----------------------------","------------------------------","XXX---------------------------","------------------------------","-----XXX----------------------","------------------------------","-----------XXX----------------","-o--------------------------o-","------XXX---------------------","XXX-----------------------XXXX","------------XXX-------XX------","------------------XX----------","------------------------------","XXXXXXXX---XXXXX--------------"],"6-a":["----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","----------XXXXXXXXXX----------","-------oo---XXXXXXXX----------","-o----------XXXXXXXX----------","------XXXX--XXXXXXXX----------","--------------o---------------","XXXX--------------------------","-------------XXXX-----------o-","---------------------XX-------","XXXXXXXX-----------------XXXXX"],"7-a":["-------------------V---------------","-----------------o---o-------------","------------X-H------------H--XXX--","-----V------XXXXXXXXXXXXXXXXXXXXX--","--------XX----o--------------------","-----------------------------------","-----------XXXXXX---Ho-------------","-----------------------------------","-------------V------XX--------H----","-----------------------------------","XX--------o------XXXXX----H--------","-----------------------------------","---X----H----H-X-----------------o-","---XXXXXXXXXXXXX-------------------","XXXX--------------------------XXXXX"]};class VX{playerIsOnLastLevel=!1;keys;columnsPerLevel;lossesInARow=0;playerWonLastRound=!1;constructor(){}update(X,q){const F=this.keys.length,f=[];if(X){for(let J=0;J<F;++J)f.push(1);this.lossesInARow=0}else{let J=q;for(let $=0;$<F;++$)if(J>this.columnsPerLevel[$])f[$]=1,J-=this.columnsPerLevel[$];else{f[$]=J/this.columnsPerLevel[$];break}}const Q=f.length;for(let J=0;J<Q;++J){const $=f[J],B=this.keys[J],w=V.getNode(B);if($===1){if(!V.hasEdge(Y,B))V.addDefaultEdge(Y,B,[[B,1],[z,0]])}++w.visitedCount,w.sumPercentCompleted+=$,w.updateReward();const W=w.sumPercentCompleted/w.visitedCount,H=1-W;V.mapEdges((b)=>{if(b.tgt===B)b.probability[0][1]=W,b.probability[1][1]=H})}if(!X){++this.lossesInARow;for(let J=0;J<this.lossesInARow;++J){const $=V.getNode(Y).neighbors,B=$.length;if(B===1)break;let w="",W=-1e4;for(let H=0;H<B;++H){const b=V.getNode($[H]).reward;if(b>W)w=$[H],W=b}console.log("removing edge:",w),V.removeEdge(Y,w)}}this.playerWonLastRound=X}get(X){const q=JX(V,0.95,!0,!0,20);if(this.columnsPerLevel=[],this.playerWonLastRound)this.keys=[x(q[Y])];else this.keys=[Y];for(let Q=0;Q<X;++Q){const J=x(q[this.keys[Q]]);if(this.keys.push(J),J===M)break}this.keys.splice(0,1),this.playerIsOnLastLevel=this.keys.includes(M);const F=Array(C).fill(""),f=this.keys.length;for(let Q=0;Q<f;++Q){const J=bX[this.keys[Q]];this.columnsPerLevel.push(J[0].length);for(let $=0;$<C;++$)F[$]+=J[$]}return F}}class ZX extends S{ctx;camera;numCoins;levelDirector;staticEntities;dynamicEntities;constructor(X){super();this.ctx=X,this.camera=new o,this.levelDirector=new VX}onEnter(){this.dynamicEntities=[],this.staticEntities=[],this.numCoins=0,this.dynamicEntities.push(new t(2,12));const X=this.levelDirector.get(3),q=X.length;if(q!==C){console.error("Level should have 15 rows!");return}const F=X[0].length;for(let f=0;f<q;++f){const Q=X[f];if(F!==Q.length){console.error(`Every row in the level should have the same number of columns! (${F} !== ${Q.length}).`);return}for(let J=0;J<F;++J){const $=Q[J];if($==="X")this.staticEntities.push(new a(J,f));else if($==="o")++this.numCoins,this.dynamicEntities.push(new e(J,f));else if($==="H")this.dynamicEntities.push(new XX(J,f,F));else if($==="V")this.dynamicEntities.push(new qX(J,f));else if($!=="-")console.error(`Unhandled tile type: ${Q[J]}`)}}}update(X){let q=this.dynamicEntities.length,F=0;for(;F<q;++F)if(this.dynamicEntities[F].dead)this.dynamicEntities.splice(F,1),--q,--F;const f=this.staticEntities.length;let Q;for(F=0;F<q;++F){const $=this.dynamicEntities[F];$.update(X),$.physicsUpdate(X);for(Q=F+1;Q<q;++Q)$.collision(this.dynamicEntities[Q]);for(Q=0;Q<f;++Q)$.collision(this.staticEntities[Q])}const J=this.dynamicEntities[0];if(J.coinsCollected>=this.numCoins)if(this.levelDirector.playerIsOnLastLevel)this.changeScene=G;else this.changeScene=D;if(J.dead)this.changeScene=D}render(){this.ctx.clearRect(0,0,L,A),this.camera.update(this.dynamicEntities[0].pos.x);let X=this.staticEntities.length,q=0;for(;q<X;++q)this.staticEntities[q].render(this.ctx,this.camera);X=this.dynamicEntities.length;for(q=0;q<X;++q)this.dynamicEntities[q].render(this.ctx,this.camera)}_onExit(){const X=this.dynamicEntities[0];this.levelDirector.update(!X.dead,Math.floor(X.maxColumn))}}class kX extends S{ctx;constructor(X){super();this.ctx=X}onEnter(){this.ctx.clearRect(0,0,L,A),this.ctx.font="30px Arial",this.ctx.fillStyle="white",this.ctx.fillText("You won! Congratulations!",170,A/2)}update(X){}render(){}_onExit(){}}class BX{canvas;ctx;currentScene;sceneManager;constructor(){this.canvas=document.createElement("canvas"),this.canvas.setAttribute("id","canvas"),this.canvas.width=L,this.canvas.height=A,this.ctx=this.canvas.getContext("2d"),document.getElementById("game").appendChild(this.canvas),this.sceneManager=new r,this.sceneManager.registerScene(D,new n(this.ctx)),this.sceneManager.registerScene(h,new ZX(this.ctx)),this.sceneManager.registerScene(G,new kX(this.ctx)),this.currentScene=this.sceneManager.getScene(D),this.currentScene.onEnter()}start(){let X=0;const q=(F)=>{const f=Math.min(0.05,(F-X)/1000);X=F,this.currentScene.update(f),this.currentScene.render();const Q=this.currentScene.changeScene;if(Q!==void 0)this.currentScene.onExit(),this.currentScene=this.sceneManager.getScene(Q),this.currentScene.onEnter();window.requestAnimationFrame(q)};window.requestAnimationFrame(q)}}window.addEventListener("load",()=>{v.init(),new BX().start()});
